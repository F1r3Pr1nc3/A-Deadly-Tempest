namespace = distar
#################################
#
# Anomaly Events
# by Dee Majek
# Tweaked by FirePrince
# For disabled L-Gates (less important)
# distar.2050 - distar.8000
#
#################################

### Empty outcome removed ###
# Randomize L-Cluster outcome on_game_start
event = {
	id = distar.8000
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		random_list = {
			70 = {
				set_global_flag = gray_goo_crisis_set
				set_global_flag = active_gray_goo
				set_global_flag = dragon_season
			}
			30 = {
				set_global_flag = gray_goo_empire_set
				set_global_flag = dragon_season
			}
			30 = {
				set_global_flag = dragon_season
			}
		}
	}
}

##### THE ENIGMATIC CACHE ######
# (vanilla only tweaked for lgate_disabled)
event = {
	id = distar.2050
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		no_scope = { has_distar = yes }
		NOT = {
			any_system = {
				has_star_flag = enigmatic_cache_system
			}
		}
		any_playable_country = {
			is_ai = no
			is_at_war = no
		}
	}
	immediate = {
		# spawn tube by random gateway
		random_system = {
			limit = {
				any_system_megastructure = {
					OR = {
						is_megastructure_type = gateway_ruined
						is_megastructure_type = gateway_restored
						is_megastructure_type = gateway_final
						is_megastructure_type = lgate_base
						is_megastructure_type = lgate_disabled
					}
				}
			}
			star = {
				planet_event = { id = distar.20501 }
			}
		}
	}
}

planet_event = {
	id = distar.20501
	is_triggered_only = yes
	hide_window = yes

	immediate = {
		# save spawn point
		solar_system = {
			if = {
				limit = {
					any_system_megastructure = {
						OR = {
							is_megastructure_type = gateway_ruined
							is_megastructure_type = gateway_restored
							is_megastructure_type = gateway_final
							is_megastructure_type = lgate_base
							is_megastructure_type = lgate_disabled
						}
					}
				}
				random_system_megastructure = {
					limit = {
						OR = {
							is_megastructure_type = gateway_ruined
							is_megastructure_type = gateway_restored
							is_megastructure_type = gateway_final
							is_megastructure_type = lgate_base
							is_megastructure_type = lgate_disabled
						}
					}
					save_event_target_as = spawning_gateway
				}
			}
			# use root planet as spawn point if fired for debugging
			else = {
				root = {
					save_event_target_as = spawning_gateway
				}
			}
		}
		# Finding a target planet to scan and spawning enigmatic cache system
		if = {
			limit = {
				any_system = {
					exists = owner
					owner = {
						is_country_type = default
						is_at_war = no
						any_owned_planet = {
							is_colony = yes
							NOT = { has_planet_flag = has_been_scanned }
						}
					}
				}
			}
			if = {
				limit = {
					any_system = {
						exists = owner
						owner = {
							is_ai = no
							is_country_type = default
							is_at_war = no
							any_owned_planet = {
								is_colony = yes
								NOT = { has_planet_flag = has_been_scanned }
							}
						}
					}
				}
				closest_system = {
					limit = {
						exists = owner
						owner = {
							is_country_type = default
							is_at_war = no
							is_ai = no
							any_owned_planet = {
								is_colony = yes
								NOT = { has_planet_flag = has_been_scanned }
							}
						}
					}
					random_system_planet = {
						limit = { exists = owner }
						#set_planet_flag = has_been_scanned
						save_event_target_as = new_location
						solar_system = { set_star_flag = enigmatic_cache_system }
					}
				}
			}
		}
		else = {
			closest_system = {
				limit = {
					exists = owner
					owner = {
						is_country_type = default
						is_at_war = no
						any_owned_planet = {
							is_colony = yes
							NOT = { has_planet_flag = has_been_scanned }
						}
					}
				}
				random_system_planet = {
					limit = { exists = owner }
					#set_planet_flag = has_been_scanned
					save_event_target_as = new_location
					solar_system = { set_star_flag = enigmatic_cache_system }
				}
			}
		}
		create_country = {
			name = "NAME_enigmatic_cache"
			type = enigmatic_cache
			flag = {
				icon = {
					category = spherical
					file = flag_spherical_4.dds
				}
				background = {
					category = backgrounds
					file = "00_solid.dds"
				}
				colors = {
					"black"
					"black"
					"null"
					"null"
				}
			}
			effect = {
				save_global_event_target_as = enigmatic_cache_country
			}
		}
		event_target:enigmatic_cache_country = {
			set_graphical_culture = guardian_01
			create_enigmatic_cache_fleet = yes
		}
		every_country = {
			establish_communications_no_message = event_target:enigmatic_cache_country
		}
	}
}

# Attempts to create new enigmatic cache at safe location
country_event = {
	id = distar.5055
	hide_window = yes

	is_triggered_only = yes

	trigger = {
	# Shouldn't trigger if the enigmatic cache country already has an enigmatic cache in rotation
		NOT = {
			any_owned_ship = {
				has_ship_flag = enigmatic_cache_ship
			}
		}
	}

	immediate = {
		if = {
			limit = {
				any_playable_country = {
					is_ai = no
					is_at_war = no
					NOT = { is_hostile = root.owner }
					any_owned_planet = {
						NOT = { has_planet_flag = has_been_scanned }
					}
				}
			}
			closest_system = {
				limit = {
					exists = owner
					owner = {
						is_ai = no
						is_at_war = no
						NOT = { is_hostile = root.owner }
					}
					any_system_planet = {
						is_colony = yes
						NOT = { has_planet_flag = has_been_scanned }
					}
				}
				random_system_planet = {
					limit = {
						is_colony = yes
						NOT = { has_planet_flag = has_been_scanned }
					}
					save_event_target_as = new_location
					solar_system = {
						set_star_flag = enigmatic_cache_system
					}
				}
			}
			create_enigmatic_cache_fleet = yes
		}
		# A gateway
		else_if = {
			limit = {
				any_system = {
					any_system_megastructure = {
						OR = {
							is_megastructure_type = gateway_ruined
							is_megastructure_type = gateway_restored
							is_megastructure_type = gateway_final
							is_megastructure_type = lgate_base
							is_megastructure_type = lgate_disabled
						}
					}
				}
			}
			closest_system = {
				limit = {
					any_system_megastructure = {
						OR = {
							is_megastructure_type = gateway_ruined
							is_megastructure_type = gateway_restored
							is_megastructure_type = gateway_final
							is_megastructure_type = lgate_base
							is_megastructure_type = lgate_disabled
						}
					}
				}
				random_system_megastructure = {
					limit = {
						OR = {
							is_megastructure_type = gateway_ruined
							is_megastructure_type = gateway_restored
							is_megastructure_type = gateway_final
							is_megastructure_type = lgate_base
							is_megastructure_type = lgate_disabled
						}
					}
					save_event_target_as = new_location
					solar_system = {
						set_star_flag = enigmatic_cache_system
					}
				}
			}
			create_enigmatic_cache_fleet = yes
		}
		# A non hostile system without an owner
		else_if = {
			limit = {
				any_system = {
					has_owner = no
					NOR = {
						has_star_flag = guardian
						has_star_flag = hostile_system
					}
				}
			}
			random_system = {
				limit = {
					has_owner = no
					NOR = {
						has_star_flag = guardian
						has_star_flag = hostile_system
					}
				}
				random_system_planet = {
					limit = {
						has_owner = no
					}
					save_event_target_as = new_location
					solar_system = {
						set_star_flag = enigmatic_cache_system
					}
				}
			}
			create_enigmatic_cache_fleet = yes
		}
		else = {
			country_event = { id = distar.5055 days = 500 }
		}
	}
}


#################################
#
# Distant Stars Events
# by Miranda van den Brink
#
#################################

####### VOIDSPAWN/HATCHLING EVENTS #######

# Gatekeeper Egg Planet Owner
planet_event = {
	id = distar.5000
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		has_planet_flag = hatchling_egg
		NOR = {
			has_global_flag = hatchling_triggered
			has_planet_flag = hatchling_planet_owner_triggered
			owner = {
				is_at_war = yes
			}
		}
	}

	immediate = {
		save_global_event_target_as = hatchling_egg
		planet_event = { id = distar.5010 days = 200 random = 100 }
		#planet_event = { id = distar.5010 days = 3 random = 1 }
		set_planet_flag = hatchling_planet_owner_triggered
	}
}


# All Rifts Removed (on_monthly_pulse)
event = {
	id = distar.5014
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		exists = event_target:hatchling_egg
		event_target:hatchling_egg = {
			has_planet_flag = egg_interrupted
			NOR = {
				has_planet_flag = rifts_removed
				has_deposit = d_egg_cracking
			}
		}
	}
	immediate = {
		event_target:hatchling_egg = {
			switch = {
				trigger = is_planet_class
				pc_savannah = { set_planet_entity = { entity = pc_savannah } }
				pc_desert = { set_planet_entity = { entity = pc_desert } }
				pc_arid = { set_planet_entity = { entity = pc_arid } } # vanilla fix!?
				pc_gray_goo = { set_planet_entity = { entity = pc_gray_goo } }
				pc_gaia = { set_planet_entity = { entity = pc_gaia } }
			}
			owner = {
				country_event = { id = distar.5015 }
			}
			set_planet_flag = rifts_removed
			remove_modifier = egg_rifts
		}
	}
}

# All Rifts Removed Notification
country_event = {
	id = distar.5015
	title = distar.5014.name
	desc = distar.5014.desc
	picture = GFX_evt_news_room
	show_sound = event_radio_chatter
	location = event_target:hatchling_egg

	is_triggered_only = yes

	option = {
		name = EXCELLENT
	}
	after = {
		hidden_effect = {
			event_target:hatchling_egg = {
				remove_planet_flag = hatchling_egg
				remove_planet_flag = egg_interrupted
				remove_planet_flag = hatchling_will_trigger
				remove_planet_flag = space_owner_triggered
				remove_planet_flag = hatchling_planet_owner_triggered
			}
			clear_global_event_target = hatchling_egg
			clear_global_event_target = hatchling
			clear_global_event_target = hatchling_fleet
			event_target:hatchling_country = { destroy_country = yes }
			clear_global_event_target = hatchling_country
			remove_global_flag = hatchling_triggered
		}
	}
}

# Quest (from distar.5009)
country_event = {
	id = distar.5012
	title = distar.5012.name
	desc = distar.5012.desc
	picture = GFX_evt_voidspawn
	show_sound = event_laboratory_sound
	location = event_target:hatchling_egg

	is_triggered_only = yes

	option = {
		name = EXCELLENT
		add_research_option = tech_gargantuan_evolution
		add_tech_progress = {
			tech = tech_gargantuan_evolution
			progress = 0.3
		}
	}
	after = {
		hidden_effect = {
			event_target:hatchling_egg = {
				remove_planet_flag = hatchling_egg
				remove_planet_flag = egg_interrupted
				remove_planet_flag = hatchling_will_trigger
				remove_planet_flag = space_owner_triggered
				remove_planet_flag = hatchling_planet_owner_triggered
			}
			clear_global_event_target = hatchling_egg
			clear_global_event_target = hatchling
			clear_global_event_target = hatchling_fleet
			event_target:hatchling_country = { destroy_country = yes }
			clear_global_event_target = hatchling_country
			remove_global_flag = hatchling_triggered
		}
	}
}