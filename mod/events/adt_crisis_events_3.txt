############################
#
# Crisis Events III
# Replaced by A Deadly Tempest (Cybrex awakening)
#
############################

namespace = crisis

# Spawn Cybrex
country_event = {
	id = crisis.2400
	hide_window = yes

	trigger = {
		NOT = { has_global_flag = cybrex_resurface }
		OR = {
			AND = {
				has_global_flag = ai_invasion_ongoing
				is_country_type = ai_empire
				galaxy_percentage > 0.20
			}
			AND = {
				has_global_flag = gray_goo_crisis_active
				CmtTriggerIsGraygoo = yes
				num_fleets > 60 # TODO dynamically!?
			}
		}
	}

	mean_time_to_happen = {
		months = 12
	}

	immediate = {
		set_global_flag = cybrex_resurface
		remove_global_flag = cybrex_departed
		remove_global_flag = cybrex_destroyed
		random_rim_system = {
			limit = { NOT = { has_star_flag = sealed_system } }
			spawn_system = {
				min_distance >= 20
				max_distance <= 50
				initializer = "cybrex_beta"
			}
		}
		# Vanilla doesnt use/check his own saved targets!?
		if = { limit = { NOT = { exists = event_target:cybrex } }
			random_country = {
				limit = { is_country_type = cybrex_empire }
				save_global_event_target_as = cybrex
			}
		}

		save_event_target_as = cybrex_target

		observer_event = { id = observer.52 }
		# Cybrex Notification
		every_country = {
			limit = { is_country_type_with_subjects = yes }
			country_event = { id = crisis.2401 days = 2 }
		}

		event_target:cybrex = {
			country_event = { id = crisis.2421 days = 4 }
			country_event = { id = crisis.2421 days = 120 }
			country_event = { id = crisis.2421 days = 320 }
			establish_communications_no_message = root
			establish_communications_no_message = event_target:cybrex_target
		}
	}
}

# # Cybrex Notification
# country_event = {
# 	id = crisis.2401
# 	title = "crisis.2401.name"
# 	desc = "crisis.2401.desc"
# 	# desc = {
# 	# 	text = "crisis.2401.desc"
# 	# 	trigger = { is_country_type = ai_empire }
# 	# }
# 	# desc = {
# 	# 	text ="crisis.2401.b.desc"
# 	# 	trigger = { CmtTriggerIsGraygoo = yes }
# 	# }

# 	picture = GFX_evt_physics_research
# 	show_sound = event_red_alert
# 	location = event_target:cybrex_beta

# 	is_triggered_only = yes

# 	option = {
# 		name = ONSCREEN
# 		hidden_effect = {
# 			country_event = { id = crisis.2402 }
# 			establish_communications_no_message = event_target:cybrex
# 			event_target:cybrex_beta = {
# 				every_system_planet = {
# 					set_surveyed = {
# 						surveyed = yes
# 						surveyor = root
# 					}
# 				}
# 			}
# 		}
# 	}
# }

# Final Machine World Destroyed
# id = crisis.2046
# Incoming Transmission
country_event = {
	id = crisis.2408
	title = "TRANSMISSION"
	desc = "crisis.2408.desc"

	diplomatic = yes

	picture_event_data = {
		portrait = ai_crisis_2
		room = ship_room
	}

	is_triggered_only = yes

	option = {
		name = crisis.2408.a
	}
	after = {
		hidden_effect = {
			clear_global_event_target = cybrex
			remove_global_flag = cybrex_resurface
			remove_global_flag = cybrex_destroyed
			remove_country_flag = cybrex_donation
		}
	}
}

# Cybrex First Attacks (HIDDEN)
country_event = {
	id = crisis.2421
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		OR = {
			has_global_flag = ai_invasion_ongoing
			has_global_flag = gray_goo_crisis_active
		}
	}

	immediate = {
		# FIXME vanilla: not used anywhere, not finished?
		# random_country = { limit = { is_country_type = ai_empire }
		# 	save_event_target_as = contingency
		# }

		create_leader = {
			class = admiral
			species = owner_main_species
			name = random
			skill = 5
			traits = {
				trait = leader_trait_cybrex
			}
		}
		last_created_leader = { set_age = 0 }
		capital_scope = {
			# save_event_target_as = cybrex_home # FIXME vanilla: not used anywhere, not finished?
			create_fleet = {
				effect = {
					set_owner = prevprev
					while = {
						count = 10
						create_ship = {
							name = random
							design = "NAME_Taciturn"
							graphical_culture = "ai_01"
						}
					}
					assign_leader = last_created_leader
					while = {
						count = 20
						create_ship = {
							name = random
							design = "NAME_Reticent"
							graphical_culture = "ai_01"
						}
					}
					set_location = {
						target = prev
						distance = 45
						angle = random
					}

					save_event_target_as = cybrex_fleet
					set_aggro_range = 500
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_fleet_flag = cybrex_attack_fleet
				}
			}
		}
		country_event = {
			id = crisis.2421
			days = 1800
		}
	}
}

# (ADT)
country_event = {
	# id = fallen_empires_awakening.3
	id = crisis.2003 #adt only
	title = OK
	desc = OK
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		if = {
			limit = { NOT = { exists = event_target:gray_species } }
			species = { save_event_target_as = gray_species }
		}
		clear_ethos = yes
		if = {
			limit = {
				has_policy_flag = robots_outlawed
			}
			set_policy = {
				policy = robot_pop_policy
				option = robot_pops_allowed
				cooldown = no
			}
		}
		if = {
			limit = {
				OR = {
					has_policy_flag = ai_servitude
					has_policy_flag = ai_outlawed
				}
			}
			set_policy = {
				policy = artificial_intelligence_policy
				option = ai_full_rights
				cooldown = no
			}
		}
		set_government_cooldown = no
		shift_ethic = ethic_gestalt_consciousness

		if = { limit = { NOT = { has_ethic = "ethic_gestalt_consciousness" } }
			country_add_ethic = "ethic_gestalt_consciousness"
		}

		change_government = {
			authority = auth_machine_intelligence
			# authority = auth_ancient_machine_intelligence
			cooldown = no
			# civics = {
			# 	# civic = civic_final_defense_protocols
			# 	# civic = civic_awakened_machine
			# 	civic = civic_machine_nanites_culture
			# }
			remove_invalid_civics = yes
		}

		create_species = {
			name = "ESGO"
			class = "ESGO" #MACHINE
			portrait = lithnanite # event_target:gray_species
			traits = {
				trait = "trait_pc_machine_preference"
				trait = "trait_machine_unit"
				# trait = "trait_robot_enhanced_memory"
				# trait = "trait_robot_loyalty_circuits"
				trait = "trait_robot_superconductive"
				trait = "trait_robot_mass_produced"
				trait = "trait_robot_streamlined_protocols"
				trait = "trait_robot_durable"
				trait = "trait_robot_recycled"
				trait = "trait_robot_high_maintenance"
				trait = "trait_robot_uncanny"
			}
			immortal = yes
			# effect = {}
		}
		change_dominant_species = { species = last_created_species change_all = yes } #it's still broken do NOT use this #it will make the species right of the species to unchangeable #stellaris v3.0.1


		# civic = civic_revanchist_fervor
		# civic = civic_ancient_caches_of_technology
		force_remove_civic = civic_meritocracy
		force_remove_civic = civic_environmentalist
		set_country_type = awakened_gate_builders # awakened_fallen_empire
		force_add_civic = civic_machine_terminator
		force_add_civic = civic_awakened_machine
		# set_name = "NAME_Graygoo_Consonance"
		species = {
			rename_species = {
				name = "NAME_Dessanu"
				name_list = "graygoo"
			}
			remove_self_modified = yes
			change_species_characteristics = {
				immortal = yes
				pops_can_be_colonizers = yes
				pops_can_migrate = no
				pops_can_join_factions = no
				pops_have_happiness = no
				# pops_can_be_slaves = no
				pops_can_reproduce = yes
				can_generate_leaders = yes
				can_be_modified = yes
				# pops_auto_growth = <1, speed at which the pops from that species grow automatically
				# pop_maintenance = <1, amount of energy each pop of that species consume monthly
				# new_pop_resource_requirement = { type = food_surplus value = 0 }
				portrait = event_target:gray_species
			}
			modify_species = {
				# species = this # if pop
				remove_trait = "trait_nomadic"
				add_trait = "trait_pc_relic_preference"
				add_trait = "trait_machine_unit"
				# add_trait = "trait_pc_gray_goo_preference" TODO
				# add_trait = "trait_pc_ai_preference"
				# add_trait = "trait_pc_machine_preference"
				# add_trait = "trait_hive_mind"
				add_trait = "trait_robot_superconductive"
				add_trait = "trait_robot_recycled"
				add_trait = "trait_robot_mass_produced"
				add_trait = "trait_robot_streamlined_protocols"
				add_traits_at_start_of_list = yes
				# change_scoped_species = yes # if pop
				# effect = {
				# 	set_species_identity = last_created_species
				# }
			}
		}

		add_awakened_fallen_empire_resources = yes
		capital_scope = {
			prev.species = { set_species_homeworld = prev }
			starbase = { CmtEffectCreateAdmiralty_GraygooCapitalDefence = yes }
		}

		# create_half_species = { species_one = last_created_species species_two = event_target:gray_species }
		# change_dominant_species = { species = last_created_species change_all = yes }
		# change_dominant_species = { species = event_target:gray_species change_all = yes }
		last_created_species = {
			set_citizenship_type = { country = root type = citizenship_full cooldown = yes }
			# set_species_identity = event_target:gray_species
		}
		set_built_species = last_created_species
		set_origin = origin_machine_nanites
		set_government_cooldown = no
		## Start Workaround to change gov completely (as change_government is not working)
		## FIXEM: does not work: Required authority [auth_machine_intelligence] is excluded by other restrictions. Result authority [auth_machine_intelligence] is not valid
		# change_government = {
		# 	authority = auth_machine_intelligence
		# 	cooldown = no
		# 	remove_invalid_civics = yes
		# }

		## WORKAROUND
		create_country = {
			name = random
			type = awakened_fallen_empire
			species = last_created_species
			ignore_initial_colony_error = yes
			day_zero_contact = no
			ethos = { ethic = ethic_gestalt_consciousness }
			authority = auth_machine_intelligence
			civics = {
				civic = civic_awakened_machine
				civic = civic_machine_terminator
				# civic = civic_fanatic_purifiers
			}
			flag = random
			effect = {
				root = { copy_ethos_and_authority = prev }
			}
		}
		last_created_country = { destroy_country = yes }
		## WORKAROUND END
		force_add_civic = civic_fanatic_purifiers

		# Establish communications
		every_country = {
			limit = {
				is_country_type_with_subjects = yes
				NOT = { has_communications = root }
			}
			establish_communications_no_message = root
			root = { save_event_target_as = contact_empire }
			country_event = { id = action.1 }
		}
		root = { save_event_target_as = awakened_machine_empire }
		if = { limit = { host_has_dlc = "Apocalypse" }
			give_technology = { tech = tech_colossus message = no }
		}

		change_country_flag = {
			# icon = { category = "paradox" file = "paradox_logo.dds" }
			icon = { category = "special" file = "gray_goo.dds" }
			background = { category = "backgrounds" file = "sinus.dds" }
			colors = { "teal" "dark_grey" "null" "null" }
		}
		if = {
			limit = {
				NOT = { has_policy_flag = orbital_bombardment_armageddon }
				can_set_policy = {
					policy = orbital_bombardment
					option = orbital_bombardment_armageddon
				}
				# has_policy_flag = orbital_bombardment_selective
			}
			set_policy = {
				policy = orbital_bombardment
				option = orbital_bombardment_armageddon
				cooldown = no
			}
		} else_if = {
			limit = {
				NOT = { has_policy_flag = orbital_bombardment_indiscriminate }
				can_set_policy = {
					policy = orbital_bombardment
					option = orbital_bombardment_indiscriminate
				}
			}
			set_policy = {
				policy = orbital_bombardment
				option = orbital_bombardment_indiscriminate
				cooldown = no
			}
		}
		event_target:nanite_factory = {
			root = { CmtEffectCreateAdmiralty_GraygooRoamer = yes } # Roamers
		}
		set_graphical_culture = "fallen_machine_empire_01" # temporary
		add_global_ship_design = "NAME_Omega"
		add_global_ship_design = "NAME_Alpha"
		add_global_ship_design = "NAME_Beta"
		add_global_ship_design = "NAME_Gamma"
		add_global_ship_design = "NAME_Theta"
		add_global_ship_design = "NAME_Tau"
		add_global_ship_design = "NAME_Sigma"
		add_global_ship_design = "NAME_FE_Starbase"
		create_ship_design = { design = "NAME_Omega" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Alpha" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Beta" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Gamma" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Theta" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Tau" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Sigma" }
		add_ship_design = last_created_design
		# create_ship_design = { design = "NAME_FE_Starbase" }
		# add_ship_design = last_created_design
		# add_awakened_fallen_empire_fleet = yes
		event_target:nanite_factory = {
			create_fallen_empire_starting_navy = yes # galactic object
		}

		if = { limit = { has_origin = origin_machine_nanites }
			set_graphical_culture = "grey_tempesttw"
		} else = { set_graphical_culture = "machine_01" }
		create_fleet = {
			effect = {
				set_owner = root
				create_ship = {
					name = random
					design = "NAME_mardak_vol_haters_colossus"
					graphical_culture = owner
				}
				set_location = {
					# target = prev.capital_scope
					target = event_target:nanite_factory
					distance = 30
					angle = random
				}
			}
		}
		set_country_flag = declared_crisis
		## colonize random planet
		random_system = {
			limit = {
				has_star_flag = lcluster
				has_owner = no
				NOR = {
					has_star_flag = lcluster_lgate
					has_star_flag = graygoo_factory_system
					has_star_flag = lcluster5
					# is_same_value = event_target:lcluster_factory_system
					any_fleet_in_system = { is_in_combat = yes }
				}
				any_system_planet = { is_planet_class = pc_gray_goo }
				OR = {
					NOT = { exists = event_target:goo_slayer }
					event_target:goo_slayer = {
						OR = {
							is_ai = yes
							is_surveyed = {
								who = event_target:goo_slayer
								status = no
							}
						}
					}
				}
			}
			create_starbase = {
				# size = "starbase_starport"
				size = "starbase_gatebuilders"
				owner = root
				module = "missile_battery"
				module = "gun_battery"
				building = "target_uplink_computer"
				effect = {
					while = { count = 4
						create_ship = { random_existing_design = military_station_small }
					}
				}
			}
			random_system_planet = {
				limit = { is_planet_class = pc_gray_goo has_owner = no }
				remove_modifier = terraforming_candidate
				## part.copy of graygoo.100
				root = { CmtEffectCreateAdmiralty_GraygooGarryson = yes }
				change_pc = pc_gaia
				reset_planet = yes
				set_planet_flag = hidden_nanite_world
				prevent_anomaly = yes
				set_owner = root

				add_deposit = d_energy_5
				add_deposit = d_natural_farmland
				add_deposit = d_minerals_2

				while = {
					count = 16
					create_pop = { species = owner_main_species }
				}
				while = {
					count = 2
					add_district_and_planet_size_if_needed_effect = {
						district = district_city
					}
				}
				while = {
					count = 3
					add_district_and_planet_size_if_needed_effect = {
						district = district_mining
					}
				}
				while = {
					count = 4
					add_district_and_planet_size_if_needed_effect = {
						district = district_generator
					}
				}
				if = {
					limit = {
						event_target:gate_builders.species = {
							is_lithoid = yes
						}
					}
					while = {
						count = 2
						add_district_and_planet_size_if_needed_effect = {
							district = district_mining
						}
					}
					add_district_and_planet_size_if_needed_effect = {
						district = district_generator
					}
				}
				else = {
					while = {
						count = 3
						add_district_and_planet_size_if_needed_effect = {
							district = district_farming
						}
					}
				}
				add_building = building_capital
				add_building = building_mineral_purification_hub
				add_building = building_energy_grid
				add_building = building_stronghold
				add_building = building_factory_1
				add_building = building_holo_theatres
				add_building = building_foundry_1

				create_army = {
					owner = root
					species = owner_main_species
					type = "nanite_giga_guardian"
				}
			}
		}
		every_owned_leader = {
			limit = { leader_class = ruler }
			change_leader_portrait = lithnanite
		}
	}
}
