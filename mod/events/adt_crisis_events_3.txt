############################
#
# Crisis Events III
# Replaced by A Deadly Tempest (Cybrex awakening)
#
############################

namespace = crisis

# Spawn Cybrex
country_event = {
	id = crisis.2400
	hide_window = yes

	trigger = {
		NOR = {
			has_global_flag = cybrex_resurface
			event_target:CmtGlobalVar = { check_variable = { which = CmtVarCybrexResurfacing value = 1 } }
		}
		OR = {
			AND = {
				has_global_flag = ai_invasion_ongoing
				CmtTriggerIsContingency = yes
				OR = {
					galaxy_percentage > 0.4
					AND = {
						NOT = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarCybrexResurfacing value = 2 } } }
						endgame_crisis_large_size_trigger = yes # galaxy_percentage > 0.2
					}
					AND = {
						event_target:CmtGlobalVar = { check_variable = { which = CmtVarCybrexResurfacing value = 4 } }
						galaxy_percentage > 0.07
					}
					event_target:CmtGlobalVar = { check_variable = { which = CmtVarCybrexResurfacing value = 5 } }
				}
			}
			AND = { # Also for the Tempest
				has_global_flag = gray_goo_crisis_active
				CmtTriggerIsGraygoo = yes
				OR = {
					event_target:CmtGlobalVar = {	# v.3.1
						is_variable_set = CmtVarGrayGooCybrexLimit
						check_variable = { which = CmtVarGrayGooCybrexLimit value < prev.trigger:num_fleets }
					}
					AND = {	# Pre v.3.1
						NOT = { event_target:CmtGlobalVar = { is_variable_set = CmtVarGrayGooCybrexLimit } }
						OR = {
							num_fleets > 110
							AND = {
								NOT = { event_target:CmtGlobalVar = { check_variable = { which = CmtVarCybrexResurfacing value = 2 } } }
								num_fleets > 64
							}
							AND = {
								event_target:CmtGlobalVar = { check_variable = { which = CmtVarCybrexResurfacing value = 4 } }
								num_fleets > 36 # Initial ca. 27
							}
						}
					}
				}
			}
		}
	}

	## Also called by crisis.2025 if CmtVarCybrexResurfacing = 5
	mean_time_to_happen = {
		months = 12
		modifier = {
			factor = 5
			event_target:CmtGlobalVar = { check_variable = { which = CmtVarCybrexResurfacing value = 2 } }
		}
		modifier = { factor = 0.1 has_global_flag = CmtFlagDebugMode }
	}

	immediate = {
		set_global_flag = cybrex_resurface
		remove_global_flag = cybrex_departed
		remove_global_flag = cybrex_destroyed
		random_rim_system = {
			limit = { NOT = { has_star_flag = sealed_system } }
			spawn_system = {
				min_distance >= 15
				max_distance <= 35
				initializer = "cybrex_beta"
			}
		}
		if = {
			limit = { NOT = { exists = event_target:cybrex } }
			random_country = {
				limit = { is_country_type = cybrex_empire }
				save_global_event_target_as = cybrex
			}
		}
		# Cybrex communication
		save_event_target_as = cybrex_target # ADT
		every_country = {
			limit = { is_country_type_with_subjects = yes }
			country_event = { id = crisis.2401 days = 2 }
		}
		observer_event = { id = observer.52 }
		event_target:cybrex = {
			country_event = { id = crisis.2421 days = 4 }
			country_event = { id = crisis.2421 days = 120 }
			country_event = { id = crisis.2421 days = 320 }
			establish_communications_no_message = root
			establish_communications_no_message = event_target:cybrex_target # ADT
		}
	}
}

# # Cybrex Notification
# country_event = {
# 	id = crisis.2401
# 	title = "crisis.2401.name"
# 	desc = "crisis.2401.desc"
# 	# desc = {
# 	# 	text = "crisis.2401.desc"
# 	# 	trigger = { is_country_type = ai_empire }
# 	# }
# 	# desc = {
# 	# 	text ="crisis.2401.b.desc"
# 	# 	trigger = { CmtTriggerIsGraygoo = yes }
# 	# }

# 	picture = GFX_evt_physics_research
# 	show_sound = event_red_alert
# 	location = event_target:cybrex_beta

# 	is_triggered_only = yes

# 	option = {
# 		name = ONSCREEN
# 		hidden_effect = {
# 			country_event = { id = crisis.2402 }
# 			establish_communications_no_message = event_target:cybrex
# 			event_target:cybrex_beta = {
# 				every_system_planet = {
# 					set_surveyed = {
# 						surveyed = yes
# 						surveyor = root
# 					}
# 				}
# 			}
# 		}
# 	}
# }

# Final Machine World Destroyed
# id = crisis.2046
# Incoming Transmission
country_event = {
	id = crisis.2408
	title = "TRANSMISSION"
	desc = "crisis.2408.desc"

	diplomatic = yes

	picture_event_data = { portrait = ai_crisis_2 room = ship_room }

	is_triggered_only = yes

	option = { name = crisis.2408.a }
	after = {
		hidden_effect = {
			clear_global_event_target = cybrex
			remove_global_flag = cybrex_resurface
			remove_global_flag = cybrex_destroyed
			remove_country_flag = cybrex_donation
		}
	}
}

# Cybrex First Attacks (HIDDEN)
country_event = {
	id = crisis.2421
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		OR = { has_global_flag = ai_invasion_ongoing has_global_flag = gray_goo_crisis_active }
	}

	immediate = {
		if = {
			limit = { NOT = { exists = event_target:contingency } }
			random_country = {
				limit = { CmtTriggerIsContingency = yes }
				save_event_target_as = contingency
			}
		}

		create_leader = {
			class = commander
			species = owner_species
			name = random
			skill = 5
			set_age = 0
			traits = { 0 = leader_trait_cybrex }
		}
		# last_created_leader = { set_age = 0 }
		capital_scope = {
			# save_event_target_as = cybrex_home # TODO vanilla: not used anywhere, not finished?
			create_fleet = {
				effect = {
					set_owner = prevprev
					while = { count = 10
						create_ship = {
							name = random
							design = "NAME_Taciturn"
							graphical_culture = "ai_01"
						}
					}
					assign_leader = last_created_leader
					while = { count = 20
						create_ship = {
							name = random
							design = "NAME_Reticent"
							graphical_culture = "ai_01"
						}
					}
					set_location = {
						target = prev
						distance = 45
						angle = random
					}

					save_event_target_as = cybrex_fleet
					set_aggro_range = 500
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = self
					set_fleet_flag = cybrex_attack_fleet
				}
			}
		}
	}
}

# (ADT) Fixed CDT v.3.11
# id = fallen_empires_awakening.3
country_event = {
	id = crisis.2003 # ADT only
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		set_update_modifiers_batch = begin
		# if = {
		# 	limit = { NOT = { exists = event_target:gray_species } }
		# 	species = { save_event_target_as = gray_species }
		# }

		# change_government = {
		# 	authority = auth_machine_intelligence gives error anyway
		# 	# authority = auth_ancient_machine_intelligence
		# 	cooldown = no
		# 	# civics = {
		# 	# 	# civic = civic_final_defense_protocols
		# 	# 	# civic = civic_awakened_machine
		# 	# 	civic = civic_machine_nanites_culture
		# 	# }
		# 	remove_invalid_civics = yes
		# }

		create_species = {
			name = "DISTAR_NANO_CAT"	# "ESGO"
			class = ROBOT # MACHINE		# "ESGO"
			portrait = event_target:gray_species
			traits = {
				ideal_planet_class = pc_gray_goo # add_trait = "trait_pc_gray_goo_preference"
				# ideal_planet_class = pc_machine # trait = "trait_pc_machine_preference"
				trait = "trait_machine_unit" # MACHINE
				# trait = "trait_mechanical" # ROBOT
				# trait = "trait_robot_enhanced_memory"
				# trait = "trait_robot_loyalty_circuits"
				trait = "trait_robot_superconductive"
				trait = "trait_robot_mass_produced"
				trait = "trait_robot_streamlined_protocols"
				trait = "trait_robot_durable"
				trait = "trait_robot_recycled"
				trait = "trait_robot_high_maintenance"
				trait = "trait_robot_uncanny"
			}
			immortal = yes
			effect = {
				if = {
					limit = { has_lithoids = yes }
					change_species_characteristics = { portrait = lithnanite can_change_leader = yes }
				}
				save_event_target_as = gray_species
			}
		}
		change_dominant_species = { species = last_created_species change_all = yes } # it's still broken do NOT use this # It will make the species right of the species to unchangeable # Stellaris v.3.0.1

		set_government_cooldown = no
		clear_ethos = yes
		shift_ethic = ethic_gestalt_consciousness
		if = {
			limit = { is_gestalt = no }
			country_add_ethic = ethic_gestalt_consciousness
		}
		change_government = random
		# civic = civic_revanchist_fervor
		# civic = civic_ancient_caches_of_technology
		force_remove_civic = civic_meritocracy
		force_remove_civic = civic_environmentalist
		if = { limit = { lgate_enabled = yes } set_country_type = awakened_gate_builders }
		else = { set_country_type = awakened_fallen_empire }
		force_add_civic = civic_machine_terminator
		force_add_civic = civic_awakened_machine
		# set_name = "NAME_Graygoo_Consonance"
		species = {
			change_species_characteristics = {
				immortal = yes
				can_be_modified = yes
				can_change_leader = yes
				# pops_auto_growth = <1, speed at which the pops from that species grow automatically
				# pop_maintenance = <1, amount of energy each pop of that species consume monthly
				# portrait = root.ruler # event_target:gray_species
			}
			remove_self_modified = yes

			modify_species = {
				# species = this # If pop
				base = this
				remove_trait = "trait_nomadic"
				ideal_planet_class = "pc_gray_goo" # add_trait = "trait_pc_gray_goo_preference"
				# ideal_planet_class = "pc_relic" # add_trait = "trait_pc_relic_preference"
				add_trait = "trait_machine_unit"
				# add_trait = "trait_pc_gray_goo_preference" TODO
				# add_trait = "trait_pc_ai_preference"
				# add_trait = "trait_pc_machine_preference"
				# add_trait = "trait_hive_mind"
				add_trait = "trait_robot_superconductive"
				add_trait = "trait_robot_recycled"
				add_trait = "trait_robot_mass_produced"
				add_trait = "trait_robot_streamlined_protocols"
				add_traits_at_start_of_list = yes
				# change_scoped_species = yes # If pop
				effect = {
					set_species_identity = event_target:gray_species
					rename_species = { name = dessanu } # "NAME_Dessanu" name_list = "LITHOID3" "graygoo" ?
				}
			}
		}

		every_owned_pop = { change_species = event_target:gray_species pop_force_add_ethic = ethic_gestalt_consciousness }

		add_awakened_fallen_empire_resources = yes
		capital_scope = {
			prev.species = { set_species_homeworld = prev }
			starbase = { CmtEffectCreateAdmiralty_GraygooCapitalDefence = yes }
		}

		# create_half_species = { species_one = last_created_species species_two = event_target:gray_species }
		# change_dominant_species = { species = event_target:gray_species change_all = yes }
		event_target:gray_species = {
			set_citizenship_type = { country = root type = citizenship_full cooldown = yes }
			# set_species_identity = event_target:gray_species
		}
		set_built_species = last_created_species
		set_government_cooldown = no
		## Start Workaround to change gov completely (as change_government is not working)
		## FIXEM: does not work: Required authority [auth_machine_intelligence] is excluded by other restrictions. Result authority [auth_machine_intelligence] is not valid
		change_government = {
			authority = auth_machine_intelligence
			# cooldown = no
			civics = {
				civic = civic_awakened_machine
				civic = civic_machine_terminator
				civic = civic_machine_assimilator
				civic = civic_fanatic_purifiers
				civic = random
			}
			remove_invalid_civics = yes
		}
		set_origin = origin_machine_nanites

		## WORKAROUND
		create_country = {
			# name = random
			type = awakened_fallen_empire
			species = last_created_species
			ignore_initial_colony_error = yes
			day_zero_contact = no
			ethos = { ethic = ethic_gestalt_consciousness }
			authority = auth_machine_intelligence
			civics = { civic = civic_awakened_machine }
			# flag = random
			effect = {
				force_add_civic = civic_machine_terminator
				force_add_civic = civic_machine_assimilator
				force_add_civic = civic_fanatic_purifiers
				root = { copy_ethos_and_authority = prev }
			}
		}
		last_created_country = { destroy_country = yes }
		## WORKAROUND END

		# Establish communications
		every_country = {
			limit = {
				is_country_type_with_subjects = yes
				NOT = { has_communications = root }
			}
			establish_communications_no_message = root
			root = { save_event_target_as = contact_empire }
			country_event = { id = action.1 }
		}
		root = { save_event_target_as = awakened_machine_empire }
		if = {
			limit = { host_has_dlc = "Apocalypse" }
			set_country_flag = pk_nanobots
			set_country_flag = colossus_project
			set_country_flag = killed_hatchling
			give_tech_no_error_effect = { TECH = tech_gargantuan_evolution MESSAGE = no }
			give_tech_no_error_effect = { TECH = tech_colossus MESSAGE = no }
			give_tech_no_error_effect = { TECH = tech_pk_nanobots MESSAGE = no }
			give_tech_no_error_effect = { TECH = tech_nanite_guardians MESSAGE = no }
			give_tech_no_error_effect = { TECH = tech_nanite_mega_construction MESSAGE = no }
			give_tech_no_error_effect = { TECH = tech_nanite_modular_engineering MESSAGE = no }
			give_tech_no_error_effect = { TECH = tech_nanite_voidspawn MESSAGE = no }
		}

		change_country_flag = {
			# icon = { category = "paradox" file = "paradox_logo.dds" }
			icon = { category = "special" file = "gray_goo.dds" }
			background = { category = "backgrounds" file = "sinus.dds" }
			colors = { "teal" "dark_grey" "null" "null" }
		}
		if = {
			limit = {
				NOT = { has_policy_flag = orbital_bombardment_armageddon }
				can_set_policy = { policy = orbital_bombardment option = orbital_bombardment_armageddon }
				# has_policy_flag = orbital_bombardment_selective
			}
			set_policy = { policy = orbital_bombardment option = orbital_bombardment_armageddon cooldown = no }
		}
		else_if = {
			limit = {
				NOT = { has_policy_flag = orbital_bombardment_indiscriminate }
				can_set_policy = { policy = orbital_bombardment option = orbital_bombardment_indiscriminate }
			}
			set_policy = { policy = orbital_bombardment option = orbital_bombardment_indiscriminate cooldown = no }
		}

		if = {
			limit = {
				has_policy_flag = robots_outlawed
				can_set_policy = { policy = robot_pop_policy option = robot_pops_allowed }
			}
			set_policy = { policy = robot_pop_policy option = robot_pops_allowed cooldown = no }
		}
		if = {
			limit = {
				OR = { has_policy_flag = ai_servitude has_policy_flag = ai_outlawed }
				can_set_policy = { policy = artificial_intelligence_policy option = ai_full_rights }
			}
			set_policy = { policy = artificial_intelligence_policy option = ai_full_rights cooldown = no }
		}

		# TODO: too much?
		# event_target:nanite_factory = {
		# 	root = { CmtEffectCreateAdmiralty_GraygooRoamer = yes } # Roamers
		# }
		# set_graphical_culture = "fallen_machine_empire_01" # temporary
		# add_global_ship_design = "NAME_Omega"
		# add_global_ship_design = "NAME_Alpha"
		# add_global_ship_design = "NAME_Beta"
		# add_global_ship_design = "NAME_Gamma"
		# add_global_ship_design = "NAME_Theta"
		# add_global_ship_design = "NAME_Tau"
		# add_global_ship_design = "NAME_Sigma"
		# add_global_ship_design = "NAME_FE_Starbase"
		# create_ship_design = { design = "NAME_Omega" }
		# add_ship_design = last_created_design
		# create_ship_design = { design = "NAME_Alpha" }
		# add_ship_design = last_created_design
		# create_ship_design = { design = "NAME_Beta" }
		# add_ship_design = last_created_design
		# create_ship_design = { design = "NAME_Gamma" }
		# add_ship_design = last_created_design
		# create_ship_design = { design = "NAME_Theta" }
		# add_ship_design = last_created_design
		# create_ship_design = { design = "NAME_Tau" }
		# add_ship_design = last_created_design
		# create_ship_design = { design = "NAME_Sigma" }
		# add_ship_design = last_created_design
		# create_ship_design = { design = "NAME_FE_Starbase" }
		# add_ship_design = last_created_design
		# add_awakened_fallen_empire_fleet = yes
		# event_target:nanite_factory = {
		# 	create_fallen_empire_starting_navy = yes # Galactic object
		# }
		# TODO: too much?
		# capital_scope.solar_system = {
		# 	every_system_planet = {
		# 		limit = { can_colonize = { who = root status = yes } }
		# 		root = { CmtEffectCreateAdmiralty_GraygooGarryson = yes }
		# 	}
		# }

		if = {
			limit = { has_origin = origin_machine_nanites }
			set_graphical_culture = "grey_tempesttw"
		}
		else = { set_graphical_culture = "machine_01" }
		create_fleet = {
			effect = {
				set_owner = root
				create_ship = {
					name = random
					design = "NAME_Nanobot_colossus"
					graphical_culture = owner
				}
				set_location = {
					target = event_target:nanite_factory
					distance = 30
					angle = random
				}
			}
		}
		# set_country_flag = declared_crisis # Now at crisis.4099
		## Colonize random planet
		random_system = {
			limit = {
				has_star_flag = lcluster
				has_owner = no
				NOR = {
					has_star_flag = lcluster_lgate
					has_star_flag = graygoo_factory_system
					has_star_flag = lcluster5
					# is_same_value = event_target:lcluster_factory_system
					any_fleet_in_system = { is_in_combat = yes }
				}
				any_system_planet = {
					OR = { is_planet_class = pc_gray_goo is_planet_class = pc_gaia }
				}
				OR = {
					NOT = { exists = event_target:goo_slayer }
					event_target:goo_slayer = {
						OR = {
							is_ai = yes
							is_surveyed = { who = event_target:goo_slayer status = no }
						}
					}
				}
			}
			create_starbase = {
				# size = "starbase_starport"
				size = "starbase_gatebuilders"
				owner = root
				module = "missile_battery"
				module = "gun_battery"
				building = "target_uplink_computer"
				effect = {
					while = { count = 4
						create_ship = { random_existing_design = military_station_small }
					}
				}
			}
			random_system_planet = {
				limit = {
					OR = { is_planet_class = pc_gray_goo is_planet_class = pc_gaia }
					has_owner = no
				}
				remove_modifier = terraforming_candidate
				## part.copy of graygoo.100
				root = { CmtEffectCreateAdmiralty_GraygooGarryson = yes }
				change_pc = pc_gaia
				reset_planet = yes
				set_planet_flag = hidden_nanite_world
				prevent_anomaly = yes
				set_owner = root

				add_deposit = d_energy_5
				add_deposit = d_natural_farmland
				add_deposit = d_minerals_2

				while = { count = 16
					create_pop = { species = owner_species }
				}
				while = { count = 2
					add_district_and_planet_size_if_needed_effect = { district = district_city }
				}
				while = { count = 3
					add_district_and_planet_size_if_needed_effect = { district = district_mining }
				}
				while = { count = 4
					add_district_and_planet_size_if_needed_effect = { district = district_generator }
				}
				if = {
					limit = { event_target:gate_builders.species = { is_lithoid = yes } }
					while = { count = 2
						add_district_and_planet_size_if_needed_effect = { district = district_mining }
					}
					add_district_and_planet_size_if_needed_effect = { district = district_generator }
				}
				else = {
					while = { count = 3
						add_district_and_planet_size_if_needed_effect = { district = district_farming }
					}
				}
				add_building = building_capital
				add_building = building_mineral_purification_hub
				add_building = building_energy_grid
				add_building = building_stronghold
				add_building = building_factory_1
				add_building = building_holo_theatres
				add_building = building_foundry_1

				create_army = {
					owner = root
					species = owner_species
					type = "nanite_giga_guardian"
				}
			}
		}
		ruler = { change_leader_portrait = lithnanite }
		set_update_modifiers_batch = end
		# Declare Crisis (declare_crisis_war_effect)
		country_event = { id = crisis.4099 days = 360 }
		# Declare War
		country_event = { id = crisis.2004 days = 400 }
	}
}

# GrayGoo Declare War (ADT)
# Root = event_target:new_crisis
# id = fallen_empires_awakening.3
country_event = {
	id = crisis.2004 # Adt only
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		# Taken from unusing country_event = { id = crisis.4116 }
		if = {
			limit = {
				any_playable_country = {
					is_galactic_community_member = yes
					any_war = {
						using_war_goal = { type = wg_declared_crisis owner = prev }
					}
				}
			}
			random_playable_country = {
				limit = {
					is_galactic_community_member = yes
					any_war = {
						using_war_goal = { type = wg_declared_crisis owner = prev }
					}
				}
				random_war = {
					limit = { using_war_goal = { type = wg_declared_crisis owner = prev } }
					save_event_target_as = crisis_war
				}
			}
		}
		else = {
			random_war = {
				limit = {
					is_total_war = yes
					using_war_goal = { type = "wg_declared_crisis" owner = root }
					OR = {
						any_defender = { is_same_empire = root }
						any_war_participant = { is_same_empire = root }
					}
				}
				save_event_target_as = crisis_war
			}
		}
		every_country = {
			limit = {
				NOR = {
					is_same_empire = root
					is_at_war_with = root
					is_in_federation_with = root
				}
				OR = {
					is_hostile = root
					is_hostile_to = root
					has_country_flag = gate_builders_hostility
					has_country_flag = declared_crisis
				}
			}
			if = {
				limit = { is_country_type_with_subjects = yes exists = event_target:crisis_war }
				# Joins Community - Joins Crisis Wars
				join_war_on_side = { war = event_target:crisis_war side = attackers }
			}
			else_if = {
				limit = {
					is_country_type_with_subjects = yes
					can_declare_war = { target = prev attacker_war_goal = "wg_declared_crisis" }
				}
				declare_war = {
					target = root
					name = { key = "NAME_Declared_Crisis_War" variable_string = "[This.MainDefender.GetAdj]" }
					attacker_war_goal = "wg_declared_crisis"
					effect = { save_event_target_as = crisis_war }
				}
			}
			else = {
				root = {
					if = {
						limit = { can_declare_war = { target = prev attacker_war_goal = wg_absorption } }
						declare_war = { target = prev attacker_war_goal = wg_absorption }
					}
				}
			}
		}
	}
}
