namespace = distar
###############################################
###############################################
#####                                     #####
#####     L-Gates Events and Graygoo      #####
#####      Support A Deadly Tempest       #####
#####       Support Crisis Manager        #####
#####       Support Expanded Events       #####
#####                                     #####
###############################################
###############################################

# Randomize L-Cluster outcome on_game_start
# event = {
# 	id = distar.8000
# 	hide_window = yes
# 	is_triggered_only = yes
# 	# Empty outcome removed
# 	# Single Dragon outcome removed
# 	immediate = {
# 		random_list = {
# 			8 = {
# 				set_global_flag = gray_goo_crisis_set
# 				set_global_flag = active_gray_goo
# 				set_global_flag = dragon_season
# 			}
# 			4 = {
# 				set_global_flag = gray_goo_empire_set
# 				set_global_flag = dragon_season
# 			}
# 			# 2 = { set_global_flag = dragon_season }
# 		}
# 		event_target:global_event_country = {
# 			country_event = { id = distar.8001 days = 30 } # Workaround Fix
# 		}
# 	}
# }
# Temp Vanilla Workaround Fix
# country_event = {
# 	id = distar.8001
# 	hide_window = yes
# 	is_triggered_only = yes
# 	trigger = {
# 		is_country_type = global_event
# 		NOT = { has_global_flag = l_cluster_opened }
# 	}
# 	immediate = {
# 		remove_global_flag = gray_goo_empire_set
# 		remove_global_flag = gray_goo_crisis_set
# 		remove_global_flag = active_gray_goo
# 		remove_global_flag = dragon_season
# 		# country_event = { id = distar.8000 } TODO?
# 		random_list = {
# 			8 = {
# 				set_global_flag = gray_goo_crisis_set
# 				set_global_flag = active_gray_goo
# 				set_global_flag = dragon_season
# 			}
# 			4 = {
# 				set_global_flag = gray_goo_empire_set
# 				set_global_flag = dragon_season
# 			}
# 			# 2 = { set_global_flag = dragon_season }
# 		}
# 	}
# }
# check for gateway within borders
country_event = {
	id = distar.10900
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		if = {
			limit = {
				has_lgate = yes
				OR = {
					is_ai = no
					NOT = { has_global_flag = gray_goo_crisis_set }
					fleet_power > 30000
				}
			}
			random_owned_megastructure = {
				limit = { CmtTriggerIsClosedLgate = yes }
				save_event_target_as = candidate_gateway
			}
			# enable project
			if = {
				limit = {
					NOT = { any_playable_country = { has_country_flag = lcluster_opener } }
				}
				country_event = { id = distar.10905 }
			}
		}
		else = {
			# looping check
			country_event = { id = distar.10901 }
		}
	}
}

# looping check for owning gateway, once every two months
country_event = {
	id = distar.10902
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = { has_global_flag = l_cluster_opened }
	}
	immediate = {
		if = {
			limit = {
				has_lgate = yes
				has_technology = tech_lgate_activation
				OR = {
					is_ai = no
					NOT = { has_global_flag = gray_goo_crisis_set }
					fleet_power > 30000
				}
			}
			random_owned_megastructure = {
				limit = { CmtTriggerIsClosedLgate = yes }
				save_event_target_as = candidate_gateway
			}
			# enable project
			country_event = { id = distar.10905 }
		}
		else = {
			# *THIS* looping check
			country_event = {
				id = distar.10902
				days = 60
			}
		}
	}
}

### Open L-Gate
country_event = {
	# Changed by FirePrince: Possibility of all random events at the same time (+ Crisis Manager patch)
	id = distar.10950
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		set_country_flag = lcluster_opener
		set_country_flag = lgates_activated
		set_timed_global_flag = { flag = CmtFlagLgateOpenedNow days = 5 }

		### Set 1st L-Gate as Target
		if = {
			limit = {
				NOT = { exists = event_target:CmtTargetLgateOrininatingSystem }
			}
			# from = ship
			if = {
				limit = {
					exists = from
					from = { is_scope_type = ship }
				}
				from.solar_system = { save_global_event_target_as = CmtTargetLgateOrininatingSystem }
			}
			else_if = {
				limit = { exists = event_target:candidate_gateway_system }
				event_target:candidate_gateway_system = { save_global_event_target_as = CmtTargetLgateOrininatingSystem }
			}
			else_if = {
				limit = { exists = event_target:candidate_gateway }
				event_target:candidate_gateway = {
					solar_system = { save_global_event_target_as = CmtTargetLgateOrininatingSystem }
				}
			}
			else = {
				# If no valid scope search generally
				every_system_within_border = {
					limit = { has_star_flag = lgate }
					every_fleet_in_system = {
						limit = {
							exists = owner
							exists = leader
							exists = solar_system
							is_owned_by = root
						}
						every_owned_ship = {
							limit = { is_ship_class = shipclass_science_ship }
							solar_system = { save_global_event_target_as = CmtTargetLgateOrininatingSystem }
						}
					}
				}
			}
			if = {
				# only last fallback
				limit = {
					NOT = { exists = event_target:CmtTargetLgateOrininatingSystem }
				}
				random_megastructure = {
					limit = { CmtTriggerIsClosedLgate = yes }
					solar_system = { save_global_event_target_as = CmtTargetLgateOrininatingSystem }
				}
			}
		}
		# if = {
		# 	limit = { NOT = { exists = event_target:global_event_country } }
		# 	random_country = {
		# 		limit = { is_country_type = global_event }
		# 		save_global_event_target_as = global_event_country
		# 	}
		# }
		# if = { # Temporary due vanilla bug!?
		# 	limit = { mid_game_years_passed < 0 }
		# Workaround Fix: Must be re-run due strange bug in 3.0 at game_start
		event_target:global_event_country = {
			country_event = { id = distar.8001 }
		}
		### Change Outcome (Crisis Manager) ###
		if = {
			limit = {
				OR = {
					AND = {
						has_global_flag = CmtFlagLgateForbidSilence
						NOR = {
							has_global_flag = dragon_season
							has_global_flag = gray_goo_empire_set
							has_global_flag = gray_goo_crisis_set
						}
					}
					AND = {
						has_global_flag = CmtFlagLgateForbidLdrake
						has_global_flag = dragon_season
					}
					AND = {
						has_global_flag = CmtFlagLgateForbidDessanu
						has_global_flag = gray_goo_empire_set
					}
					AND = {
						has_global_flag = CmtFlagLgateForbidGraygoo
						has_global_flag = gray_goo_crisis_set
					}
				}
			}
			remove_global_flag = dragon_season
			remove_global_flag = gray_goo_empire_set
			remove_global_flag = gray_goo_crisis_set
			remove_global_flag = active_gray_goo
			random_list = {
				3 = {
					modifier = {
						factor = 0
						has_global_flag = CmtFlagLgateForbidSilence
						NAND = {
							has_global_flag = CmtFlagLgateForbidLdrake
							has_global_flag = CmtFlagLgateForbidDessanu
							has_global_flag = CmtFlagLgateForbidGraygoo
						}
					}
				}
				3 = {
					modifier = {
						factor = 0
						# OR = {
						has_global_flag = CmtFlagLgateForbidLdrake
						# remove outcome anyway?
						has_global_flag = CmtFlagLgateForbidSilence
						NAND = {
							has_global_flag = CmtFlagLgateForbidDessanu
							has_global_flag = CmtFlagLgateForbidGraygoo
						}
					}
					set_global_flag = dragon_season
				}
				3 = {
					modifier = {
						factor = 0
						has_global_flag = CmtFlagLgateForbidDessanu
					}
					set_global_flag = gray_goo_empire_set
				}
				5 = {
					modifier = {
						factor = 0
						has_global_flag = CmtFlagLgateForbidGraygoo
					}
					set_global_flag = gray_goo_crisis_set
					set_global_flag = active_gray_goo
				}
			}
			## ADT: Always L-Drake
			if = {
				limit = {
					NOT = { has_global_flag = CmtFlagLgateForbidLdrake }
					NAND = {
						has_global_flag = CmtFlagLgateForbidDessanu
						has_global_flag = CmtFlagLgateForbidGraygoo
						has_global_flag = CmtFlagLgateForbidSilence
					}
				}
				set_global_flag = dragon_season
			}
		}
		### Activate L-Gate
		event_target:CmtTargetLgateOrininatingSystem = {
			if = {
				# flag prevents the Tempest from using this gate,
				# do not set the flag if there's only one l-gate system
				limit = {
					any_system = {
						CmtTriggerIsGalaxyLgateSystem = yes
						NOT = { is_same_value = prev }
					}
				}
				set_star_flag = lgate_originating_system
			}
			else = {
				root = { set_country_flag = only_one_lgate }
			}
			# also try to refresh the other posssible missing targets
			save_global_event_target_as = candidate_gateway_system
			random_system_megastructure = {
				limit = { CmtTriggerIsClosedLgate = yes }
				save_event_target_as = candidate_gateway
			}
		}

		# Outcome, to be determined at game start
		if = {
			limit = { has_global_flag = dragon_season }
			# All gates must not be deactivated, so call it first
			event_target:CmtTargetLgateOrininatingSystem = {
				closest_system = {
					min_steps = 3
					limit = { NOT = { any_system_planet = { is_colony = yes } } }
					set_star_flag = dragon_point
				}
			}
			# Theoretically Must be called immediately (because graygoo.100 and candidate_gateway)
			country_event = { id = distar.13000 }
		}
		country_event = { id = distar.11000 days = 1 } # Spawn L-Cluster

		if = {
			limit = { has_global_flag = gray_goo_crisis_set }
			country_event = { id = graygoo.1 days = 3 }
			country_event = { id = a_deadly_tempest.13006 days = 3 }
			country_event = { id = a_deadly_tempest.137 days = 24 }
		}
		if = {
			limit = { has_global_flag = gray_goo_empire_set }
			country_event = { id = graygoo.100 days = 3 }
			country_event = { id = a_deadly_tempest.137 days = 24 }
		}
		# Abandoned (and cancel projects for all other)
		if = {
			limit = {
				NOR = {
					has_global_flag = gray_goo_crisis_set
					has_global_flag = gray_goo_empire_set
				}
			}
			country_event = { id = distar.10951 }
		}

		event_target:global_event_country = {
			# Enable other L-Gates over time (anyway)
			country_event = { id = distar.10960 days = 200 random = 500 }
		}
		# # Flip L-Gates
		# # Activate Terminal Egress L-Gate (moved to direct to cluster init)
		# if = {
		# 	limit = { exists = event_target:lcluster1 }
		# 	event_target:lcluster1 = {
		# 		random_system_megastructure = {
		# 			limit = { CmtTriggerIsClosedLgate = yes }
		# 			CmtEffectOpenLgate = yes
		# 		}
		# 	}
		# }
		# Try to refresh posssible missing target
		if = {
			limit = { NOT = { exists = event_target:candidate_gateway } }
			if = {
				limit = {
					exists = event_target:candidate_gateway_system
					event_target:candidate_gateway_system = { any_system_megastructure = { CmtTriggerIsClosedLgate = yes } }
				}
				event_target:candidate_gateway_system = {
					random_system_megastructure = {
						limit = { CmtTriggerIsClosedLgate = yes }
						save_event_target_as = candidate_gateway
					}
				}
			} else = {
				event_target:CmtTargetLgateOrininatingSystem = {
					if = {
						limit = { any_system_megastructure = { CmtTriggerIsClosedLgate = yes } }
						save_global_event_target_as = candidate_gateway_system # for desc only
						random_system_megastructure = {
							limit = { CmtTriggerIsClosedLgate = yes }
							save_event_target_as = candidate_gateway
						}
					}
				}
			}
		}
		# Activate originating L-Gate: Put AFTER distar.13000 (if not already opened by other outcome)
		if = {
			limit = {
				exists = event_target:candidate_gateway
				event_target:candidate_gateway = { CmtTriggerIsClosedLgate = yes }
			}
			event_target:candidate_gateway = { CmtEffectOpenLgate = yes }
		}
		### Technology Control: Put AFTER graygoo.110 (copy on graygoo.116) and before l_cluster_opened!
		set_global_flag = CmtFlagLgateSkipTech
		if = {
			limit = { NOT = { has_global_flag = gray_goo_empire_set } }
			every_playable_country = {
				limit = {
					OR = {
						is_researching_technology = tech_lgate_activation
						has_tech_option = tech_lgate_activation
						has_event_chain = l_cluster_chain
					}
				}
				give_technology = { tech = tech_lgate_activation message = no }
			}
		}
		set_global_flag = l_cluster_opened
		set_global_flag = lgates_activated_globally

		## Make dragons friendly (sometimes not working so call it twice)
		country_event = { id = a_deadly_tempest.13006 days = 3 }
	}
}

# Informed about AI being close to opening L-Gate (HIDDEN)
event = {
	id = distar.10955
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		any_playable_country = {
			is_ai = no
			OR = {
				has_event_chain = l_cluster_chain
				has_special_project = LCLUSTER_PROJECT
			}
			any_relation = {
				is_country_type = default
				has_communications = prev
				has_event_chain = l_cluster_chain
				NOT = { has_country_flag = lgate_warned@prev }
				check_variable = {
					which = num_lcluster_clues
					value > 5
				}
				has_lgate = yes
			}
		}
	}
	immediate = {
		random_playable_country = {
			limit = {
				is_ai = no
				OR = {
					has_event_chain = l_cluster_chain
					has_special_project = LCLUSTER_PROJECT
				}
				any_relation = {
					is_country_type = default
					has_communications = prev
					has_event_chain = l_cluster_chain
					NOT = { has_country_flag = lgate_warned@prev }
					check_variable = {
						which = num_lcluster_clues
						value > 5
					}
					has_lgate = yes
				}
			}
			random_relation = {
				limit = {
					is_country_type = default
					has_communications = prev
					has_event_chain = l_cluster_chain
					NOT = { has_country_flag = lgate_warned@prev }
					check_variable = {
						which = num_lcluster_clues
						value > 5
					}
					has_lgate = yes
				}
				save_event_target_as = lgate_warning_country
				set_country_flag = lgate_warned@prev
			}
			country_event = { id = distar.10956 }
		}
	}
}

# Enable L-Gates over time
country_event = {
	id = distar.10960
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = l_cluster_opened
		any_megastructure = { CmtTriggerIsClosedLgate = yes }
	}
	immediate = {
		random_megastructure = {
			limit = { CmtTriggerIsClosedLgate = yes }
			CmtEffectOpenLgate = yes
			prev = {
				country_event = { id = distar.10960 days = 200 random = 500 }
			}
		}
	}
}

# Spawn L-Cluster (bit optimized by FirePrince pre 3.0.3)
country_event = {
	id = distar.11000
	hide_window = yes
	is_triggered_only = yes
	fire_only_once = yes

	immediate = {
		set_spawn_system_batch = begin
		# Batch-processes the spawn_system effects between "begin" and "end"
		# So caches are recalculated only once rather than for every system spawned
		# Can also be used when removing and adding hyperlanes
		no_scope = {
			# Makes system positions originate from galactic core
			spawn_system = {
				min_distance >= 550
				max_distance <= 560
				min_orientation_angle = 44
				max_orientation_angle = 46
				initializer = distantstars_init_01
				hyperlane = no
				effect = {
					save_global_event_target_as = lcluster1
				}
			}
			if = { limit = { NOT = { exists = event_target:lcluster1 } }
				random_system = {
					limit = { has_star_flag = lcluster1 }
					save_global_event_target_as = lcluster1
				}
			}
			event_target:lcluster1 = {
				spawn_system = {
					min_distance >= 29
					max_distance <= 31
					min_orientation_angle = 24
					max_orientation_angle = 66
					initializer = distantstars_init_02
					hyperlane = no
					effect = {
						save_global_event_target_as = lcluster2
					}
				}
				spawn_system = {
					min_distance >= 29
					max_distance <= 31
					min_orientation_angle = 114
					max_orientation_angle = 156
					initializer = distantstars_init_03
					hyperlane = no
					effect = {
						save_global_event_target_as = lcluster3
					}
				}
				spawn_system = {
					min_distance >= 30
					max_distance <= 60
					min_orientation_angle = 340
					max_orientation_angle = 20
					initializer = distantstars_init_01b
					hyperlane = no
					effect = {
						save_global_event_target_as = lcluster1b
					}
				}
			}
			if = { limit = { NOT = { exists = event_target:lcluster2 } }
				random_system = {
					limit = { has_star_flag = lcluster2 }
					save_global_event_target_as = lcluster2
				}
			}
			event_target:lcluster2 = {
				spawn_system = {
					min_distance >= 30
					max_distance <= 60
					min_orientation_angle = 0
					max_orientation_angle = 40
					initializer = distantstars_init_02b
					hyperlane = no
					effect = {
						save_global_event_target_as = lcluster2b
					}
				}
			}
			if = { limit = { NOT = { exists = event_target:lcluster3 } }
				random_system = {
					limit = { has_star_flag = lcluster3 }
					save_global_event_target_as = lcluster3
				}
			}
			event_target:lcluster3 = {
				spawn_system = {
					min_distance >= 20
					max_distance <= 30
					min_orientation_angle = 24
					max_orientation_angle = 66
					initializer = distantstars_init_04
					hyperlane = no
					effect = {
						save_global_event_target_as = lcluster4
				}
				}
				spawn_system = {
					min_distance >= 10
					max_distance <= 50
					min_orientation_angle = 250
					max_orientation_angle = 290
					initializer = distantstars_init_03b
					hyperlane = no
					effect = {
						save_global_event_target_as = lcluster3b
					}
				}
			}
			if = { limit = { NOT = { exists = event_target:lcluster4 } }
				random_system = {
					limit = { has_star_flag = lcluster4 }
					save_global_event_target_as = lcluster4
				}
			}
			event_target:lcluster4 = {
				spawn_system = {
					min_distance >= 5
					max_distance <= 10
					min_orientation_angle = 250
					max_orientation_angle = 290
					initializer = distantstars_init_05
					hyperlane = no
					effect = {
						save_global_event_target_as = lcluster5
						save_global_event_target_as = graygoo_factory_system
					}
				}
				spawn_system = {
					min_distance >= 30
					max_distance <= 60
					min_orientation_angle = 20
					max_orientation_angle = 160
					initializer = distantstars_init_04b
					hyperlane = no
					effect = {
						save_global_event_target_as = lcluster4b
					}
				}
			}
			if = { limit = { NOT = { exists = event_target:lcluster5 } }
				random_system = {
					limit = { has_star_flag = lcluster5 }
					save_global_event_target_as = lcluster5
				}
			}
			if = { limit = { NOT = { exists = event_target:lcluster1b } }
				random_system = {
					limit = { has_star_flag = lcluster1b }
					save_global_event_target_as = lcluster1b
				}
			}
			if = { limit = { NOT = { exists = event_target:lcluster2b } }
				random_system = {
					limit = { has_star_flag = lcluster2b }
					save_global_event_target_as = lcluster2b
				}
			}
			if = { limit = { NOT = { exists = event_target:lcluster3b } }
				random_system = {
					limit = { has_star_flag = lcluster3b }
					save_global_event_target_as = lcluster3b
				}
			}
			if = { limit = { NOT = { exists = event_target:lcluster4b } }
				random_system = {
					limit = { has_star_flag = lcluster4b }
					save_global_event_target_as = lcluster4b
				}
			}
			# Add hyperlanes
			event_target:lcluster5 = {
				add_hyperlane = {
				from = this
					to = event_target:lcluster4
				}
				# For backward compat.
				if = { limit = { exists = event_target:lcluster5b }
					add_hyperlane = {
						from = this
						to = event_target:lcluster5b
					}
				}
			}
			event_target:lcluster4 = {
				add_hyperlane = {
					from = this
					to = event_target:lcluster3
				}
				add_hyperlane = {
					from = this
					to = event_target:lcluster2
				}
				add_hyperlane = {
					from = this
					to = event_target:lcluster4b
				}
			}
			event_target:lcluster3 = {
				add_hyperlane = {
					from = this
					to = event_target:lcluster1
				}
				add_hyperlane = {
					from = this
					to = event_target:lcluster3b
				}
			}
			event_target:lcluster2 = {
				add_hyperlane = {
					from = this
					to = event_target:lcluster1
				}
				add_hyperlane = {
					from = this
					to = event_target:lcluster3
				}
				add_hyperlane = {
					from = this
					to = event_target:lcluster2b
				}
			}
			event_target:lcluster1 = {
				add_hyperlane = {
					from = this
					to = event_target:lcluster1b
				}
				# Activate Terminal Egress L-Gate
				random_system_megastructure = {
					limit = { is_megastructure_type = lgate_base }
					activate_gateway = this
					set_megastructure_flag = lgate_activated
				}
			}
			event_target:lcluster1b = {
				add_hyperlane = {
					from = this
					to = event_target:lcluster2b
				}
			}
		}
		set_spawn_system_batch = end
		if = {
			limit = {
				OR = {
					has_global_flag = dragon_season
					has_global_flag = gray_goo_crisis_set
					# has_global_flag = gray_goo_empire_set
				}
			}
			# Do open all same time!?
			every_megastructure = {
				limit = { CmtTriggerIsClosedLgate = yes }
				CmtEffectOpenLgate = yes
			}
		}
	}
}

#################
###  L-Drake  ###
#################
# fired from opening event
country_event = {
	id = distar.13000
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		create_country = {
			name = "NAME_Spawning_Dragons"
			type = ldragon_country
			effect = {
				save_global_event_target_as = spawning_dragons
				every_playable_country = { establish_communications_no_message = prev }
			}
			flag = {
				icon = { category = "zoological" file = "flag_zoological_905.dds" }
				background = { category = "backgrounds" file = "00_solid.dds" }
				colors = { "dark_grey" "black" "null" "null" }
			}
		}
		while = {
			limit = {
				any_megastructure = { CmtTriggerIsClosedLgate = yes }
			}
			random_megastructure = {
				limit = { CmtTriggerIsClosedLgate = yes }
				# Flip L-Gates
				# random_system_megastructure = { limit = { CmtTriggerIsClosedLgate = yes }
				CmtEffectOpenLgate = yes
				# set dragon spawning grounds
				# solar_system = {
				closest_system = {
					min_steps = 3
					limit = {
						NOR = {
							has_star_flag = dragon_point
							any_system_planet = { is_colony = yes }
						}
					}
					set_star_flag = dragon_point
				}
			}
		}
		# Notify those without l-gate systems
		every_playable_country = {
			limit = {
				NOT = { any_system_within_border = { has_star_flag = lgate } }
			}
			country_event = { id = distar.13011 days = 1 }
		}
		while = {
			limit = {
				any_system = {
					has_star_flag = lgate
					# CmtTriggerIsGalaxyLgateSystem = yes
					NOT = { has_star_flag = young_dragon_spawned }
				}
			}
			random_system = {
				limit = {
					has_star_flag = lgate
					# CmtTriggerIsGalaxyLgateSystem = yes
					NOT = { has_star_flag = young_dragon_spawned }
					any_system_megastructure = { CmtTriggerIsOpenedLgate = yes }
				}
				set_star_flag = young_dragon_spawned
				random_system_megastructure = {
					limit = { CmtTriggerIsOpenedLgate = yes }
					closest_system = {
						min_steps = 3
						limit = {
							has_star_flag = dragon_point
							NOT = { has_star_flag = dragon_point_picked }
						}
						set_star_flag = dragon_point_picked
						# Notify re: destination
						if = {
							limit = {
								prevprev = { exists = space_owner } ## L-Gate System
							}
							save_event_target_as = dragons_target
							prevprev = {
								save_event_target_as = dragons_current_system
								space_owner = {
									if = {
										limit = { NOT = { is_same_empire = root } }
										set_country_flag = knows_ldragon
										country_event = { id = distar.13010 }
									}
									else = {
										## Notification 1
										root = {
											country_event = { id = distar.13010 }
										}
									}
								}
							}
						}
						star = {
							create_fleet = {
								name = "NAME_Young_Dragon"
								settings = {
									is_boss = yes
									spawn_debris = no
									can_upgrade = no
									can_disband = yes
									can_change_composition = no
									can_change_leader = no
									uses_naval_capacity = no
								}
								effect = {
									set_owner = event_target:spawning_dragons
									create_ship = {
										design = "NAME_Nanite_Dragon"
										name = "NAME_Young_Dragon"
										prefix = no
										upgradable = yes
									}
									set_location = prevprevprev							# megastructure
									set_fleet_stance = passive
									set_aggro_range_measure_from = self
									# set_aggro_range = 10
									auto_move_to_planet = {
										target = prev									# dragon_point star
										clear_auto_move_on_arrival = yes				# hang around
									}
								}
							}
						}
					}
					create_ambient_object = {
						location = this
						type = horror_spawn_object
					}
				}
			}
		}
		country_event = { id = a_deadly_tempest.13006 days = 1 }
	}
}

# Notification telling you where dragons are headed
country_event = {
	id = distar.13010
	title = distar.13010.name
	desc = {
		text = distar.13010.desc.IOpened
		trigger = { has_country_flag = lcluster_opener }
	}
	desc = {
		text = distar.13010.desc.OtherOpened
		trigger = { NOT = { is_same_empire = from } }
	}
	picture = GFX_evt_space_dragon_young
	location = event_target:dragons_current_system.star
	is_triggered_only = yes
	immediate = {
		set_country_flag = ldragon_known
		observer_event = { id = observer.63 }
	}
	option = {
		name = distar.13010.a.homicidal
		exclusive_trigger = { is_homicidal = yes }
	}
	option = { name = ALARMING }
}

country_event = {
	id = distar.13011
	title = distar.13011.name
	desc = distar.13011.desc
	picture = GFX_evt_space_dragon_young
	location = event_target:candidate_gateway
	is_triggered_only = yes
	trigger = {
		NOT = { has_country_flag = knows_ldragon }
	}
	immediate = {
		capital_scope = {
			closest_system = {
				limit = { has_star_flag = lgate }
				save_event_target_as = disturbance_system
			}
		}
	}
	option = { name = distar.13011.a }
}

# Killed dragon
country_event = {
	id = distar.13020
	title = distar.13020.name
	desc = {
		text = distar.13020.desc.LDragonKnown
		trigger = { has_country_flag = ldragon_known }
	}
	desc = {
		text = distar.13020.desc.LDragonUnknown
		trigger = {
			NOT = { has_country_flag = ldragon_known }
		}
	}
	picture = GFX_evt_space_dragon_young
	location = fromfrom
	is_triggered_only = yes
	trigger = {
		is_country_type = default
		from = { is_country_type = ldragon_country }
	}
	option = {
		name = distar.13020.a
		trigger = {
			NOT = { has_country_flag = ldragon_known }
		}
		add_monthly_resource_mult = {
			resource = influence
			value = @tier4materialreward
			min = @tier4materialmin
			max = @tier4materialmax
		}
		add_monthly_resource_mult = {
			resource = minerals
			value = @tier4materialreward
			min = @tier4materialmin
			max = @tier4materialmax
		}
	}
	option = {
		name = distar.13020.a
		trigger = { has_country_flag = ldragon_known }
		add_monthly_resource_mult = {
			resource = influence
			value = @tier4materialreward
			min = @tier4materialmin
			max = @tier4materialmax
		}
		add_monthly_resource_mult = {
			resource = minerals
			value = @tier4materialreward
			min = @tier4materialmin
			max = @tier4materialmax
		}
		add_monthly_resource_mult = {
			resource = engineering_research
			value = @tier4researchreward
			min = @tier4researchmin
			max = @tier4researchmax
		}
		add_monthly_resource_mult = {
			resource = society_research
			value = @tier4researchreward
			min = @tier4researchmin
			max = @tier4researchmax
		}
	}
}

# Science Ship enters dragon system
fleet_event = {
	id = distar.13030
	title = distar.13030.name
	desc = distar.13030.desc
	picture = GFX_evt_space_dragon_young
	location = from.star
	is_triggered_only = yes
	trigger = {
		is_ship_class = shipclass_science_ship
		from = {
			has_star_flag = dragon_point
			NOT = { has_star_flag = visited_dragon_point@root.owner }
			any_fleet_in_system = { is_ship_size = nanite_space_dragon_baby }
		}
	}
	immediate = {
		from = { set_star_flag = visited_dragon_point@root.owner }
	}
	option = {
		# enable special project
		name = distar.13030.a
		trigger = {
			owner = {
				NOR = {
					is_homicidal = yes
					has_ethic = ethic_fanatic_xenophobe
				}
			}
		}
		solar_system.star = {
			enable_special_project = {
				name = TAME_LDRAGON_PROJECT
				location = this
				owner = root.owner
			}
		}
	}
	option = { name = distar.13030.b }
}

# special project complete
country_event = {
	id = distar.13035
	title = distar.13035.name
	desc = distar.13035.desc
	picture = GFX_evt_space_dragon_young
	location = event_target:new_dragon
	is_triggered_only = yes
	immediate = {
		from.solar_system = {
			random_fleet_in_system = {
				limit = {
					exists = owner
					owner = { is_country_type = ldragon_country }
				}
				save_event_target_as = new_dragon
				set_owner = root
			}
		}
	}
	option = {
		name = INTERESTING
		fromfrom.solar_system = { custom_tooltip = distar.13035.a.tooltip }
		hidden_effect = {
			if = {
				limit = { has_global_flag = a_deadly_tempest_mod_active }
				give_technology = {
					tech = tech_nanite_guardians
					message = no
				}
			}
		}
	}
}

country_event = {
	id = distar.13080
	title = "apoc.1.name"
	desc = {
		text = apoc.3.desc
		trigger = {
			NOT = { has_country_flag = encountered_first_gateway }
		}
	}
	desc = {
		text = apoc.3.b.desc
		trigger = { has_country_flag = encountered_first_gateway }
	}
	picture = GFX_evt_drifting_gateway
	show_sound = event_radio_chatter
	location = FROM
	is_triggered_only = yes
	trigger = {
		NOT = { exists = fromfrom }
		# Not surveyed by ship
		is_country_type_with_subjects = yes
		NOR = {
			has_country_flag = encountered_first_lgate
			has_event_chain = "l_cluster_chain"
		}
		FROM = {
			has_star_flag = lgate
			any_system_megastructure = { CmtTriggerIsClosedLgate = yes }
		}
	}
	immediate = {
		FROM = { save_event_target_as = gateway_system }
		set_country_flag = encountered_first_lgate
	}
	option = {
		name = INTRIGUING
		start_lcluster_chain = yes
	}
}
