namespace = a_deadly_tempest
# @latest_adt_version = 1.8.0
#################################################
#################################################
#####										#####
#####		Nanites Goo Special Events		#####
#####		For A Deadly Tempest			#####
#####		Written by FirePrince			#####
#####										#####
#################################################
#################################################
#
##################################################
##		Setting up mod-is-in-use flags			##
##		Activation on Game Start/Saved Game		##
##################################################
event = {
	id = a_deadly_tempest.1
	hide_window = yes
	is_triggered_only = yes
	# fire_only_once = yes
	# trigger = {
	# 	always = yes
	# 	#NOT = { has_global_flag = a_deadly_tempest_mod_active }
	# 	is_country_type = global_event
	# }
	immediate = {
		set_global_flag = a_deadly_tempest_mod_active
		if = {
			limit = {
				NOT = { exists = event_target:CmtGlobalVar }
			}
			if = {
				limit = { exists = event_target:global_event_country }
				event_target:global_event_country = { save_global_event_target_as = CmtGlobalVar }
			}
			else_if = {
				limit = {
					NAND = {
						exists = this
						is_country_type = global_event
					}
				}
				random_country = {
					limit = { is_country_type = global_event }
					save_global_event_target_as = CmtGlobalVar
				}
			}
			else_if = {
				limit = { is_scope_type = country }
				save_global_event_target_as = CmtGlobalVar
			}
		}
		# Support nhsc mod
		event_target:CmtGlobalVar = {
			set_variable = { which = random_nhsc_value value = @armor_s_t8_strength }
		}
	}
	# after = { log = "1 a_deadly_tempest_mod_active [CmtGlobalVar.random_nhsc_value]" }
}

event = {
	id = a_deadly_tempest.2
	hide_window = yes
	is_triggered_only = yes
	# fire_only_once = yes
	# title = CrisisManagerMenu.0011.name
	# desc = CrisisManagerMenu.0011.desc
	# picture = GFX_evt_CmtMenuA
	# option = {
	# 	name = CmtTextOK.name
	# 	custom_tooltip = CmtTextOK.tooltip
	# }
	trigger = {
		# is_country_type = global_event is none
		OR = {
			NAND = {
				exists = event_target:CmtGlobalVar
				has_global_flag = a_deadly_tempest_mod_active
			}
			AND = {
				has_global_flag = nhsc_v30
				event_target:CmtGlobalVar = {
					# check_variable = { which = current_adt_version value = @latest_adt_version }
					NOT = {
						check_variable = {
							which = random_nhsc_value
							value = @armor_s_t8_strength
						}
					}
				}
			}
		}
	}
	immediate = {
		set_global_flag = a_deadly_tempest_mod_active
		if = {
			limit = {
				NOT = { exists = event_target:CmtGlobalVar }
			}
			if = {
				limit = { exists = event_target:global_event_country }
				event_target:global_event_country = { save_global_event_target_as = CmtGlobalVar }
			}
			else_if = { limit = { exists = this is_scope_type = country is_country_type = global_event }
				save_global_event_target_as = CmtGlobalVar
			} else = {
				random_country = {
					limit = { is_country_type = global_event }
					save_global_event_target_as = CmtGlobalVar
				}
			}
		}
		# ESC/nhsc mod savegame support
		event_target:CmtGlobalVar = {
			# set_variable = {
			# 	which = current_adt_version
			# 	value = @latest_adt_version
			# }
			set_variable = { which = random_nhsc_value value = @armor_s_t8_strength }
			if = {
				limit = {
					has_global_flag = nhsc_v30
					NOT = {
						check_variable = { which = random_nhsc_value value = 300 }
					}
				}
				remove_global_flag = nhsc_v30
			}

			change_country_flag = {
				icon = { category = "special" file = "unknown.dds" }
				background = { category = "backgrounds" file = "00_solid.dds" }
				colors = { "black" "black" "null" "null" }
			}
		}
	}
	# after = { log = "2 a_deadly_tempest_mod_active [CmtGlobalVar.random_nhsc_value]" }
}

####################################
# Nanites spawn more ships over time
####################################
## Reinforcements 1
event = {
	id = a_deadly_tempest.3
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = event_target:graygoo_country
		exists = event_target:nanite_factory
		event_target:nanite_factory = { is_ship_size = graygoo_factory }
	}
	immediate = {
		# incrase fleet power over time
		event_target:CmtGlobalVar = {
			change_variable = { which = CmtVarFleetPower_Graygoo value = 0.5 }
		}
		event_target:graygoo_country = {
			country_event = { id = graygoo.3 days = 3 }
		}
	}
}

#########################
### Dessanu / Graygoo ###
#########################
# CmtEffectCreateNanitieFactory
planet_event = {
	id = a_deadly_tempest.4
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		create_fleet = {
			settings = {
				spawn_debris = yes
				is_boss = yes
				can_upgrade = no
				can_change_composition = no
				uses_naval_capacity = no
			}
			effect = {
				set_owner = last_created_country
				create_ship = {
					name = random
					design = "NAME_Nanite_Factory"
					graphical_culture = machine_01 #"reptilian_01"
				}
				set_location = {
					target = prev
					distance = 55
					angle = 270
				}
				save_global_event_target_as = nanite_factory
			}
		}
	}
}

### Nanites
# nanite_factory_destroyed gives tech
country_event = {
	id = a_deadly_tempest.7
	title = "a_deadly_tempest.17.name"	# leviathans.2155.name
	desc = "distar.137.paci"
	hide_window = no
	is_triggered_only = yes
	picture = GFX_evt_gray_goo_ships
	show_sound = event_celebration	# event_ship_explosion
	location = FromFromFrom
	trigger = {
		has_global_flag = l_cluster_opened
		exists = this
		# OR = {
		# 	is_ai = no
		# 	is_country_type_with_subjects = yes # is_country_type = default #
		# }
		OR = {
			AND = {
				exists = event_target:goo_slayer
				is_same_empire = event_target:goo_slayer
			}
			# NOT = { exists = event_target:gray_owner }
			# has_country_flag = gray_owner
			AND = {
				exists = event_target:gray_owner
				is_same_empire = event_target:gray_owner
			}
		}
	}
	immediate = {
		every_system = {
			limit = { has_star_flag = lcluster }
			random_system_planet = {
				limit = { is_planet_class = pc_gray_goo has_anomaly = no }
				random_list = {
					4 = {
						set_planet_flag = hatchling_egg
						random_list = {
							4 = { set_planet_flag = hatchling_will_trigger }
							6 = { }
						}
					}
					6 = { }
				}
			}
		}
		random_system = {
			limit = { has_star_flag = lcluster }
			random_system_planet = {
				limit = {
					has_moon = yes
					any_moon = { is_planet_class = pc_gray_goo has_anomaly = no is_colony = no }
					# is_preventing_anomaly = no
				}
				every_playable_country = {
					limit = {
						# is_country_type_with_subjects = yes # is_country_type = default #
						NOR = {
							# has_country_flag = gray_owner
							has_country_flag = disco_gray
							is_ai = yes
							AND = {
								exists = event_target:gray_owner
								is_same_empire = event_target:gray_owner
							}
							# AND = {
							# 	exists = event_target:goo_slayer
							# 	is_same_empire = event_target:goo_slayer
							# }
						}
					}
					prev = {
						random_moon = {
							limit = {
								is_planet_class = pc_gray_goo
								has_anomaly = no
								# is_preventing_anomaly = no
							}
							random_list = {
								4 = {
									set_planet_flag = hatchling_egg
									random_list = {
										4 = { set_planet_flag = hatchling_will_trigger }
										6 = { }
									}
								}
								6 = { }
							}
							set_surveyed = { surveyed = no surveyor = prevprev }
							add_anomaly = { category = disco_gray_cat target = prevprev }
							prevprev = { set_country_flag = disco_gray }
						}
					}
				}
			}
		}

		if = {
			limit = {
				is_ai = no
				exists = event_target:lcluster_factory_system
				is_subject = no
				no_scope = { is_difficulty > 3 }
				OR = {
					has_federation = yes
					any_owned_megastructure = {
						OR = {
							is_megastructure_type = mega_shipyard_1
							is_megastructure_type = mega_shipyard_2
							is_megastructure_type = mega_shipyard_3
						}
					}
				}
				NOR = {
					is_pacifist = yes
					has_policy_flag = liberation_wars
					has_ethic = ethic_gestalt_consciousness
					has_total_war_cb = yes
					# any_playable_country = {
					any_country = {
						# NOT = { is_same_empire = prev }
						relative_power = {
							who = prev
							category = all							#fleet
							value > equivalent
						}
					}
				}
			}
			country_event = { id = a_deadly_tempest.8 days = 2 }
		}
	}
	option = {
		name = "distar.137.a"
		custom_tooltip = "a_deadly_tempest.17.tooltip"
		hidden_effect = {
			set_variable = {
				which = picked_tech
				value = 0
			}
			# event_target:CmtGlobalVar = {
			# 	set_variable = {
			# 		which = random_nhsc_value
			# 		value = @armor_s_t8_strength
			# 	}
			# }
			while = {
				limit = {
					check_variable = {
						which = picked_tech
						value < 2
					}
				}
				# tech_nanite_torpedo tech_nanite_build_speed tech_adt_energymissiles tech_nanite_strike_craft tech_adt_gg_beam tech_nanocrystals tech_nanite_modular_engineering tech_nanite_living_metal
				random_list = {
					1 = {
						modifier = {
							factor = 0
							is_researching_technology = tech_nanite_torpedo
							has_technology = tech_nanite_torpedo
						}
						give_technology = { tech = tech_nanite_torpedo }
						change_variable = { which = "picked_tech" value = 1 }
						tooltip = {
							give_technology = { tech = tech_nanite_torpedo }
						}
					}
					1 = {
						modifier = {
							factor = 0
							is_researching_technology = tech_adt_energymissiles
							has_technology = tech_adt_energymissiles
						}
						give_technology = { tech = tech_adt_energymissiles }
						change_variable = { which = "picked_tech" value = 1 }
						tooltip = {
							give_technology = { tech = tech_adt_energymissiles }
						}
					}
					1 = {
						modifier = {
							factor = 0
							is_researching_technology = tech_nanite_strike_craft
							has_technology = tech_nanite_strike_craft
						}
						give_technology = { tech = tech_nanite_strike_craft }
						change_variable = { which = "picked_tech" value = 1 }
						tooltip = {
							give_technology = { tech = tech_nanite_strike_craft }
						}
					}
					1 = {
						modifier = {
							factor = 0
							is_researching_technology = tech_adt_gg_beam
							has_technology = tech_adt_gg_beam
						}
						give_technology = { tech = tech_adt_gg_beam }
						change_variable = { which = "picked_tech" value = 1 }
						tooltip = {
							give_technology = { tech = tech_adt_gg_beam }
						}
					}
					1 = {
						modifier = {
							factor = 0
							is_researching_technology = tech_nanocrystals
							has_technology = tech_nanocrystals
						}
						give_technology = { tech = tech_nanocrystals }
						change_variable = { which = "picked_tech" value = 1 }
						tooltip = {
							give_technology = { tech = tech_nanocrystals }
						}
					}
					1 = {
						modifier = {
							factor = 0
							is_researching_technology = tech_nanite_living_metal
							has_technology = tech_nanite_living_metal
						}
						give_technology = { tech = tech_nanite_living_metal }
						change_variable = { which = "picked_tech" value = 1 }
						tooltip = {
							give_technology = { tech = tech_nanite_living_metal }
						}
					}
					1 = {
						modifier = {
							factor = 0
							is_researching_technology = tech_nanite_modular_engineering
							has_technology = tech_nanite_modular_engineering
						}
						give_technology = { tech = tech_nanite_modular_engineering }
						change_variable = { which = "picked_tech" value = 1 }
						tooltip = {
							give_technology = { tech = tech_nanite_modular_engineering }
						}
					}
					1 = {
						modifier = {
							factor = 0
							is_researching_technology = tech_nanite_build_speed
							has_technology = tech_nanite_build_speed
						}
						give_technology = { tech = tech_nanite_build_speed }
						change_variable = { which = "picked_tech" value = 1 }
						tooltip = {
							give_technology = { tech = tech_nanite_build_speed }
						}
					}
				}
			}
			# option = {
			# 	name = "distar.137.paci"
			# 	trigger = {
			# 		has_ethic = ethic_fanatic_pacifist
			# 		has_ethic = ethic_pacifist
			# 		has_ethic = ethic_fanatic_xenophile
			# 		has_ethic = ethic_xenophile
			# 	}
			# 	hidden_effect = { # 		set_variable = { which = picked_tech value = 0 }
			# 		while = {
			# 			limit = {
			# 				check_variable = {
			# 					which = picked_tech
			# 					value < 2
			# 				}
			# 			}
			# 			random_list = { }
		}
	}
	after = {
		# Guaranteed
		hidden_effect = {
			give_tech_option = { TECH = tech_nanite_repair_system }
			give_tech_option = { TECH = tech_nanite_terraforming }
			give_tech_option = { TECH = tech_nanite_ships }
			give_tech_option = { TECH = tech_nanite_hull }
			give_tech_option = { TECH = tech_nanite_bombardment }
			give_tech_option = { TECH = tech_lgate_construction }
			# give_tech_option = { TECH = tech_enigmatic_encoder }
			# give_tech_option = { TECH = tech_enigmatic_decoder }
			give_tech_option = {
				TECH = tech_nanite_guardians
				# INFO = no
			}
			give_tech_option = {
				TECH = tech_nanite_dragon
				# INFO = no
			}
			fromfrom = {
				create_ambient_object = {
					type = explosion_particle_object
					location = THIS
					use_3d_location = yes
					duration = 10
					scale = 30
				}
				last_created_ambient_object = {
					set_location = {
						target = fromfrom
						distance = 110
						angle = 110
					}
				}
			}
			# Support nhsc mod
			if = {
				limit = {
					no_scope = { has_nhsc = yes }
					NOR = {
						has_technology = nhsc_tech_synthetic_lifeform_studies
						has_tech_option = nhsc_tech_synthetic_lifeform_studies
						is_researching_technology = nhsc_tech_synthetic_lifeform_studies
					}
				}
				give_technology = { tech = nhsc_tech_new_age_warfare message = no }
				give_technology = { tech = nhsc_tech_advanced_materials message = no }
				give_tech_option = { TECH = nhsc_tech_synthetic_lifeform_studies }
			}
			# else = { # 	# give_tech_option = { TECH = tech_nanite_build_speed }
			# 	# give_tech_option = { TECH = tech_nanite_modular_engineering }
			# 	give_tech_option = { TECH = tech_nanite_mega_construction }
			# }
		}
	}
	# TODO: Give federation members one too?
}

country_event = {
	id = a_deadly_tempest.8
	# title = "leviathans.2152.c"
	# desc = "leviathans.2157.a.tooltip"
	hide_window = yes
	fire_only_once = yes
	is_triggered_only = yes
	picture = GFX_evt_large_explosion
	show_sound = event_ship_explosion
	location = event_target:lcluster_factory_system
	# trigger = {
	# 	exists = event_target:goo_slayer
	# 	is_same_empire = event_target:goo_slayer
	# }
	# option = {
	# 	name = CmtTextOK.name
	# 	custom_tooltip = CmtTextOK.tooltip
	# }
	immediate = {
		# event_target:goo_slayer_ship.solar_system = {
		event_target:lcluster_factory_system = {
			every_system_planet = {
				limit = {
					# habitable_planet = yes
					# NOR = {
					# 	is_planet_class = pc_ringworld_habitable
					# 	is_planet_class = pc_habitat
					# }
					is_asteroid = no
					is_star = no
					NOT = { is_planet_class = pc_gas_giant }
				}
				create_ambient_object = {
					type = explosion_particle_object
					location = this
					use_3d_location = yes
					duration = 10
					scale = 20
				}
				# change_pc = pc_molten
				reset_planet = yes
			}
			every_fleet_in_system = {
				every_owned_ship = {
					reduce_hp_percent = 50
					reduce_hp = 1000
					set_disable_at_health = -1
					set_disabled = no
				}
				# destroy_fleet = this
			}
			break = yes
		}
		clear_global_event_target = lcluster_factory_system
	}
}

# on_ship_destroyed_perp
# This = owner of ship 1 (combatant)
# From = owner of ship 2 (destroyed)
# FromFrom = ship 1
# FromFromFrom = ship 2
# nanite_assimilating_effect
country_event = {
	id = a_deadly_tempest.36
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = lgates_activated_globally
		OR = {
			is_robot_empire = yes
			is_species_class = ROBOT # has_authority = auth_ancient_machine_intelligence
			# is_country_type = gray_goo
			# is_country_type = gate_builders
			# is_country_type = cybrex_empire
			# is_fallen_empire_machine = yes
			# is_country_type = ai_empire
			# is_country_type = global_event
		}
		fromfromfrom = {
			is_ship_class = shipclass_military
			NOT = { has_ship_flag = assimilate_that_robot_ship }
		}
		fromfrom = {
			OR = {
				is_ship_size = graygoo_mothership
				is_ship_size = graygoo_interdictor
				is_ship_size = nanite_dragon
				is_ship_size = large_ship_ai
				# is_ship_size = small_ship_ai
			}
		}
	}
	immediate = {
		if = {
			limit = {
				OR = {
					is_country_type = gray_goo
					is_country_type = gate_builders
					is_country_type = cybrex_empire
				}
				fromfromfrom = {
					OR = {
						is_ship_size = graygoo_mothership
						is_ship_size = graygoo_interdictor
						is_ship_size = nanite_dragon
						is_ship_size = nanite_space_dragon_baby
						is_ship_size = small_ship_ai
						is_ship_size = large_ship_ai
					}
				}
			}
			random_list = {
				2 = { }
				8 = {
					fromfrom = { nanite_assimilating_effect = yes }
				}
			}
		}
		else_if = {
			limit = {
				from = {
					OR = {
						is_robot_empire = yes is_species_class = ROBOT
						has_technology = tech_nanite_ships
					}
				}
			}
			random_list = {
				8 = { }
				2 = {
					fromfrom = { nanite_assimilating_effect = yes }
				}
			}
		}
	}
}

# on_emergency_ftl
fleet_event = {
	id = a_deadly_tempest.37
	hide_window = yes
	is_triggered_only = yes
	location = root
	trigger = {
		any_owned_ship = { is_disabled = yes }
	}
	immediate = {
		every_owned_ship = {
			limit = {
				has_ship_flag = assimilate_that_robot_ship
				is_disabled = yes
			}
			# remove_ship_flag = assimilate_that_robot_ship
			set_disable_at_health = -1
			set_disabled = no
			log= "assimilating escaped on [This.GetName] owner [This.Owner.GetName]"
		}
		# TEST fleet_combat_emergency_ftl, destroy and build new
	}
}

# TODO desc
# assimilate_that_ship
ship_event = {
	id = a_deadly_tempest.38
	hide_window = yes
	show_sound = event_ground_battle
	is_triggered_only = yes
	location = fleet
	trigger = {
		exists = this
		is_scope_valid = yes
		is_scope_type = ship
		has_ship_flag = assimilate_that_robot_ship
	}
	immediate = {
		if = {
			limit = {
				NAND = {
					exists = event_target:assimilate_that_ship
					exists = event_target:assimilate_that_ship.owner
				}
			}
			save_event_target_as = assimilate_that_ship
			#log = "ADT 38 assimilate_that_ship NOT exists"
		}
		event_target:assimilate_that_ship = {
			if = {
				limit = {
					NAND = {
						exists = event_target:assimilating_fleet
						exists = event_target:assimilating_fleet.owner
					}
				}
				solar_system = {
					random_fleet_in_system = {
						limit = {
							exists = owner # idk why but it is needed
							is_ship_class = shipclass_military
							NOR = {
								is_same_value = from.fleet
								is_same_value = event_target:assimilate_that_ship
								has_fleet_flag = assimilate_that_ship_flag_temp
							}
							is_disabled = no
							fleet_power > 0 # This alone is not sure as some ships can be on escape!?
							# has_fleet_flag = commands_merge_fleet_flag_temp
							# OR = { owner = { is_same_empire = root.owner } }
							owner = {
								OR = {
									is_robot_empire = yes
									is_species_class = ROBOT # has_authority = auth_ancient_machine_intelligence
								}
							}
						}
						save_event_target_as = assimilating_fleet
					}
				}
			}
			# if = {
			# 	limit = { NOT = { exists = event_target:assimilating_fleet } }
			# 	log = "WARNING 38 assimilating_fleet NOT exists"
			# 	## Try fallback without flag (take own ships back)!?
			# 	## ToDo: first change to owner design
			# 	if = {
			# 		limit = {
			# 			fleet = { is_in_combat = no fleet_power < 1 }
			# 		}
			# 		destroy_fleet = {
			# 			target = from.fleet
			# 			kill_leader = no
			# 			destroy_template = yes
			# 		}
			# 	}
			# 	break = yes
			# }
			# else = {
			fleet = {
				if = {
					limit = { is_in_combat = no }
					if = {
						limit = {
							exists = event_target:assimilating_fleet
							exists = event_target:assimilating_fleet.owner
						}
						if = {
							limit = {
								event_target:assimilating_fleet = { NOT = { is_same_value = PREV } is_in_combat = no }
							}
							set_owner = event_target:assimilating_fleet.owner
							if = {
								limit = { owner = { is_ai = no } }
								enable_special_project = { name = NANITE_BOARDED_SHIP_REPAIR_PROJECT location = PREV owner = owner }
							} else = {
								fleet_event = { id = a_deadly_tempest.39 days = 7 }
							}
						}
						else = {
							PREV = { ship_event = { id = a_deadly_tempest.38 days = 8 } }
						}
					} else_if = {
						limit = { fleet_power < 1 }
						destroy_fleet = {
							target = this
							kill_leader = no
							destroy_template = yes
						}
						#log = "WARNING 38 assimilating_fleet NOT exists"
					}
				} else = {
					PREV = { ship_event = { id = a_deadly_tempest.38 days = 8 } }
				}
			}
		}
	}
}

# Integrate assimilate_that_ship
# This = disabled target fleet
fleet_event = {
	id = a_deadly_tempest.39
	hide_window = yes
	is_triggered_only = yes
	location = this
	trigger = {
		exists = this
		is_scope_valid = yes
		is_scope_type = fleet
		# exists = owner
	}
	immediate = {
		# log = " merge [This.GetName] " # to [ROOT.FromFrom.fleet.GetName]
		remove_fleet_flag = commands_merge_fleet_flag_temp
		if = {
			limit = {
				NAND = {
					exists = event_target:assimilate_that_ship
					exists = event_target:assimilate_that_ship.owner
				}
			}
			random_owned_ship = {
				limit = { is_disabled = yes }
				save_event_target_as = assimilate_that_ship
			}
			if = {
				limit = {
					NOT = { exists = event_target:assimilate_that_ship }
				}
				#log = "WARNING assimilate_that_ship NOT exists"
				solar_system = {
					random_fleet_in_system = {
						limit = { has_fleet_flag = assimilate_that_ship_flag_temp }
						random_owned_ship = {
							limit = { is_disabled = yes is_owned_by = root.owner }
							save_event_target_as = assimilate_that_ship
						}
					}
				}
				if = {
					limit = {
						OR = {
							has_fleet_flag = assimilate_that_ship_flag_temp
							any_owned_ship = { count < 1 }
						}
					}
					#log = "WARNING assimilate_that_ship NOT exists, delete temp fleet"
					delete_fleet = {
						target = fleet
						kill_leader = no
						destroy_template = yes
					}
				}
			}
		}

		if = {
			limit = {
				exists = this # could be destroyd
				NAND = {
					exists = event_target:assimilating_fleet
					exists = event_target:assimilating_fleet.owner
				}
			}
			solar_system = {
				random_fleet_in_system = {
					limit = {
						is_ship_class = shipclass_military
						NOR = {
							is_same_value = FROM
							is_same_value = event_target:assimilate_that_ship
							has_fleet_flag = assimilate_that_ship_flag_temp
							owner = { is_country = event_target:CmtGlobalVar }
						}
						is_disabled = no
						fleet_power > 0 # This alone is not sure as some ships can be on escape!?
						has_fleet_flag = commands_merge_fleet_flag_temp
						owner = {
							OR = {
								is_robot_empire = yes
								is_species_class = ROBOT # has_authority = auth_ancient_machine_intelligence
							}
						}
					}
					save_event_target_as = assimilating_fleet
				}
			}
		}
		# log = "assimilating_fleet [assimilating_fleet.GetFleetName]"

		if = {
			limit = {
				exists = this # could be destroyd
				NAND = {
					exists = event_target:assimilate_that_ship
					exists = event_target:assimilate_that_ship.owner
				}
			}
			every_owned_ship = {
				limit = { is_disabled = yes }
				set_disable_at_health = -1
				set_disabled = no
				destroy_ship = this
			}
			if = {
				limit = { any_owned_ship = { count < 1 } }
				delete_fleet = {
					target = this
					kill_leader = no
					destroy_template = yes
				}
			}
			#log = "WARNING assimilate_that_ship NOT exists, delete_fleet"
			no_scope = { save_global_event_target_as = assimilate_that_ship }
			break = yes
		}
		if = {
			limit = {
				exists = this
				is_scope_type = fleet
				any_owned_ship = { is_disabled = yes }
			}
			save_event_target_as = assimilate_that_fleet
		}
		else_if = {
			limit = { exists = event_target:assimilate_that_ship }
			event_target:assimilate_that_ship.fleet = { save_event_target_as = assimilate_that_fleet }
		} else = { break = yes }

		event_target:assimilate_that_fleet = {
			if = {
				limit = { NOT = { exists = event_target:assimilating_fleet } }
				# Try fallback without temp flag (take own ships back)!?
				# ToDo: first change to owner design!?
				solar_system = {
					random_fleet_in_system = {
						limit = {
							is_ship_class = shipclass_military
							NOR = {
								is_same_value = FROM
								is_same_value = event_target:assimilate_that_ship
								has_fleet_flag = assimilate_that_ship_flag_temp
								owner = { is_country = event_target:CmtGlobalVar }
							}
							fleet_power > 0
						}
						save_event_target_as = assimilating_fleet
					}
				}
				if = {
					limit = { NOT = { exists = event_target:assimilating_fleet } }
					event_target:assimilate_that_ship = {
						if = {
							limit = { is_disabled = yes }
							set_disable_at_health = -1
							destroy_ship = this # delete_ship = this
						}
						# fleet = { remove_fleet_flag = assimilate_that_ship_flag_temp }
					}
					#log = "WARNING assimilating_fleet NOT exists, abort merge"
					# no_scope = { save_global_event_target_as = assimilating_fleet clear_global_event_target = assimilating_fleet }
					break = yes
				}
			}
			else_if = {
				# We could also merge in combat, but this would be too strong!?
				limit = { exists = event_target:assimilating_fleet }
				if = {
					limit = {
						event_target:assimilating_fleet = { is_in_combat = no }
					}
					set_owner = event_target:assimilating_fleet.owner
					remove_fleet_flag = assimilate_that_ship_flag_temp
					if = { limit = { exists = leader }
						unassign_leader = leader
					}
					every_owned_ship = {
						limit = { is_disabled = yes }
						set_disable_at_health = -1
						set_disabled = no
						reduce_hp_percent = 99
						# repair_percentage = 1
						remove_ship_flag = assimilate_that_robot_ship
					}
					if = {
						limit = {
							NOR = {
								has_fleet_order = merge_fleet_order
								is_same_value = event_target:assimilating_fleet
							}
						}
						# set_location = { target = event_target:assimilating_fleet }
						queue_actions = {
							# move_to = ROOT.FromFrom.fleet # Disabled as it will order move fleet to the point in space, not follow the target fleet.
							move_to = event_target:assimilating_fleet
							find_closest_fleet = {
								found_fleet = {
									merge_fleet = {
										target = event_target:assimilating_fleet
										allow_ftl = yes
									}
								}
							}
						}
					}
					# another ship?
					if = {
						limit ={
							event_target:assimilating_fleet.solar_system = {
								any_fleet_in_system = { has_fleet_flag = assimilate_that_ship_flag_temp is_disabled = yes }
							}
						}
						event_target:assimilating_fleet.solar_system = {
							random_fleet_in_system = {
								limit = {
									is_ship_class = shipclass_military
									is_disabled = yes # fleet_power < 1
									has_fleet_flag = assimilate_that_ship_flag_temp
								}
								fleet_event = { id = a_deadly_tempest.39 }
							}
						}
					}
				}
				else = {
					fleet_event = { id = a_deadly_tempest.39 days = 7 }
					# no_scope = { save_event_target_as = assimilate_that_ship }
				}
			}
		}
		no_scope = {
			save_global_event_target_as = assimilate_that_ship save_global_event_target_as = assimilating_fleet
			# clear_global_event_target = assimilate_that_ship clear_global_event_target = assimilating_fleet
		}
	}
}

# on_space_battle_won
# This = owner of fleet 1 (winner)
# From = owner of fleet 2 (loser)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
country_event = {
	id = a_deadly_tempest.40
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		has_global_flag = lgates_activated_globally
		OR = {
			is_robot_empire = yes
			is_species_class = ROBOT # has_authority = auth_ancient_machine_intelligence
		}
		exists = FromFromFrom
		FromFrom = {
			any_owned_ship = { is_disabled = yes }
		}
	}
	immediate = {
		if = {
			limit = { FromFromFrom = { is_scope_type = fleet } }
			FromFromFrom = {
				if = {
					limit = { is_disabled = yes }
					fleet_event = { id = a_deadly_tempest.39 }
				} else = {
					fleet_event = { id = a_deadly_tempest.37 }
				}
			}
		}
	}
}

# Mothership creates ships
country_event = {
	id = a_deadly_tempest.105
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = event_target:graygoo_country
		is_same_empire = event_target:graygoo_country
		# any_owned_fleet = {
		# 	has_fleet_flag = nanite_mother_ship
		# 	any_owned_ship = { is_ship_size = graygoo_mothership }
		# }
	}
	immediate = {
		# Check Init
		if = {
			limit = {
				check_variable = {
					which = CmtVarCapitalDefenceNumber
					value < 1
				}
			}
			event_target:CmtGlobalVar = {
				if = {
					limit = { prev = { is_country_type = gate_builders } }
					set_variable = {
						which = CmtVarWhileControlFleet
						value = CmtVarCombatFleetNumber_Dessanu
					}
				}
				else = {
					set_variable = {
						which = CmtVarWhileControlFleet
						value = CmtVarCombatFleetNumber_Graygoo
					}
				}
			}
			CmtEffectInitFleetUpperLimit = yes
		}
		# every_owned_fleet = {
		# 	limit = {
		# 		is_in_combat = no
		# 		is_ship_size = graygoo_mothership
		# 		OR = {
		# 			has_fleet_flag = nanite_mother_ship
		# 			has_fleet_flag = trait_biothrall_tolerance
		# 			# AND = { exists = solar_system solar_system = { has_star_flag = lcluster } }
		# 		}
		# 	}
		# 	if = { limit = { num_ships < 11 }
		# 		CmtEffectCreateShip_GraygooInterdictor = yes
		# 	}
		# 	if = { limit = { mid_game_years_passed >= -10 }
		# 		if = {
		# 			limit = { num_ships < 21 }
		# 			CmtEffectCreateShip_GraygooInterdictor = yes
		# 		}
		# 		# Motherships create increased ship numbers during galactic crisis
		# 		if = {
		# 			limit = {
		# 				end_game_years_passed >= 0
		# 				num_ships < 41
		# 			}
		# 			random_list = {
		# 				1 = { PREV = { CmtEffectCreateShip_GraygooMother = yes } }
		# 				9 = { PREV = { CmtEffectCreateShip_GraygooInterdictor = yes } }
		# 			}
		# 		}
		# 	}
		# }
		# Save game compatibilty
		# if = {
		# 	limit = {
		# 		has_country_flag = adtFlagActiveMothershipRebuild
		# 	}
		# 	country_event = {
		# 		id = a_deadly_tempest.105
		# 		days = 90
		# 	}
		# }
	}
	after = {
		# log = "STRENGTH [graygoo_country.CmtVarCapitalDefenceNumber]"
		if = {
			limit = {
				check_variable = {
					which = CmtVarCapitalDefenceNumber
					value > 0
				}
			}
			shoal_guard_dynamic_reinforce = {
				"KIND" = shoal_global_reinforce
				# STRENGTH = CmtVarCapitalDefenceNumber
			}
		}
	}
}

# Mothership creates ships (only Defender)
country_event = {
	id = a_deadly_tempest.106
	hide_window = yes
	mean_time_to_happen = { months = 2 }
	trigger = {
		exists = event_target:graygoo_country
		is_same_empire = event_target:graygoo_country
	}
	immediate = {
		# Check Init
		if = {
			limit = {
				check_variable = {
					which = CmtVarCapitalDefenceNumber
					value < 1
				}
			}
			event_target:CmtGlobalVar = {
				if = {
					limit = { prev = { is_country_type = gate_builders } }
					set_variable = {
						which = CmtVarWhileControlFleet
						value = CmtVarCombatFleetNumber_Dessanu
					}
				}
				else = {
					set_variable = {
						which = CmtVarWhileControlFleet
						value = CmtVarCombatFleetNumber_Graygoo
					}
				}
			}
			CmtEffectInitFleetUpperLimit = yes
		}
		if = {
			limit = {
				check_variable = {
					which = CmtVarCapitalDefenceNumber
					value > 0
				}
			}
			shoal_guard_dynamic_reinforce = {
				"KIND" = shoal_guard_reinforce
				# STRENGTH = CmtVarCapitalDefenceNumber
			}
		}
	}
}

# Gray Goo Friendship
country_event = {
	id = a_deadly_tempest.137
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = event_target:graygoo_country }
	immediate = {
		event_target:graygoo_country = {
			# Pre-Ketlings
			if = {
				limit = { exists = event_target:ratling_pre_space_country }
				set_faction_hostility = {
					set_hostile = no
					#set_neutral = no
					set_friendly = yes
					target = event_target:ratling_pre_space_country
				}
				event_target:ratling_pre_space_country = {
					set_faction_hostility = {
						set_hostile = no
						#set_neutral = no
						set_friendly = yes
						target = prev
					}
				}
			}
			# Scrapperbot
			if = {
				limit = { exists = event_target:scavenger_bot_country }
				set_faction_hostility = {
					set_hostile = no
					#set_neutral = no
					set_friendly = yes
					target = event_target:scavenger_bot_country
				}
				event_target:scavenger_bot_country = {
					set_faction_hostility = {
						set_hostile = no
						#set_neutral = no
						set_friendly = yes
						target = prev
					}
				}
			}
			# Enigmatic Fortress (enigmatic_cache)
			# if = { # 	limit = { exists = event_target:fortress_country }
			# 	set_faction_hostility = {
			# 		set_hostile = no
			# 		#set_neutral = no
			# 		set_friendly = yes
			# 		target = event_target:fortress_country
			# 	}
			# 	event_target:fortress_country = {
			# 		set_faction_hostility = {
			# 			set_hostile = no
			# 			#set_neutral = no
			# 			set_friendly = yes
			# 			target = prev
			# 		}
			# 	}
			# }
			# Enigmatic Cache (guardian_fortress)
			if = {
				limit = { exists = event_target:enigmatic_cache_present_host }
				set_faction_hostility = {
					set_hostile = no
					#set_neutral = no
					set_friendly = yes
					target = event_target:enigmatic_cache_present_host
				}
				event_target:enigmatic_cache_present_host = {
					set_faction_hostility = {
						set_hostile = no
						#set_neutral = no
						set_friendly = yes
						target = prev
					}
				}
			}
			# mardak_vol
			if = {
				limit = { exists = event_target:mardak_vol_country }
				set_faction_hostility = {
					set_hostile = no
					#set_neutral = no
					set_friendly = yes
					target = event_target:mardak_vol_country
				}
				event_target:mardak_vol_country = {
					set_faction_hostility = {
						set_hostile = no
						#set_neutral = no
						set_friendly = yes
						target = prev
					}
				}
			}
			# Gatebuilders
			if = {
				limit = {
					# is_country_type = gate_builders
					exists = event_target:ratling_country
				}
				set_faction_hostility = {
					set_hostile = no
					#set_neutral = no
					set_friendly = yes
					target = event_target:ratling_country
				}
				event_target:ratling_country = {
					set_faction_hostility = {
						set_hostile = no
						#set_neutral = no
						set_friendly = yes
						target = prev
					}
				}
			}
		}
	}
}

# Last battle, defend the base (from graygoo.162) (by FirePrince)
country_event = {
	id = a_deadly_tempest.96
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = event_target:graygoo_country
		exists = event_target:nanite_factory
		event_target:nanite_factory = { is_ship_size = graygoo_factory }
		NOT = { has_country_flag = gk_told_to_leave }
	}
	immediate = {
		event_target:graygoo_country = {
			if = {
				limit = {
					NOT = { exists = event_target:main_star }
				}
				if = {
					limit = {
						NOT = { exists = event_target:lcluster_factory_system }
					}
					event_target:nanite_factory = {
						solar_system = {
							save_event_target_as = lcluster_factory_system
							random_system_planet = {
								limit = { has_planet_flag = main_star }
								save_event_target_as = main_star
							}
						}
					}
				}
				else = {
					event_target:lcluster_factory_system = {
						random_system_planet = {
							limit = { has_planet_flag = main_star }
							save_event_target_as = main_star
						}
					}
				}
			}
			if = {
				limit = {
					check_variable = {
						which = "fleetCounter"
						value < 1
					}
				}
				set_variable = {
					which = "fleetCounter"
					value = 8
				}
				# log = "set fleetCounter [graygoo_country.fleetCounter]"
			}
			set_timed_country_flag = {
				flag = gk_told_to_leave
				days = 60
			}
			every_owned_fleet = {
				limit = {
					exists = solar_system
					solar_system = {
						has_star_flag = lcluster
						NOT = { is_same_value = event_target:lcluster_factory_system }
					}
				}
				solar_system = {
					random_system_planet = {
						limit = {
							OR = {
								is_planet_class = pc_gray_goo
								is_planet_class = pc_gaia
							}
						}
						prevprev = {
							if = {
								limit = { has_fleet_flag = nanite_mother_ship }
								# log = "shoal Guard [This.GetFleetName] returning to base [main_star.Planet.GetName] from: [Prev.GetName]"
								remove_auto_move_target = yes
								clear_fleet_actions = this
								queue_actions = {
									move_to = event_target:main_star
									orbit_planet = prev
								}
								auto_move_to_planet = {
									target = prev
									clear_auto_move_on_arrival = no
									# arrival_effect =
								}
							}
							else_if = {
								limit = {
									OR = {
										has_auto_move_target = yes
										num_ships > 1
									}
								}
								# log = "shoal [This.GetFleetName] returning to base [main_star.Planet.GetName] from: [Prev.GetName]"
								remove_auto_move_target = yes
								clear_fleet_actions = this
								event_target:graygoo_country = {
									change_variable = { which = "fleetCounter" value = 1 }
								}
								queue_actions = {
									move_to = event_target:main_star
									effect = {
										id = "graygoo_SetAuxParam_Roamer[graygoo_country.fleetCounter]"
										CmtFleetSetAuxParam_Roamer = { NUM = "graygoo_country.fleetCounter" }
									}
								}
							}
						}
					}
				}
			}
			# break
			country_event = { id = a_deadly_tempest.161 days = 61 }
			country_event = { id = a_deadly_tempest.97 days = 90 }
		}
	}
}

# Reorder base fleets
country_event = {
	id = a_deadly_tempest.97
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = event_target:graygoo_country
		exists = event_target:nanite_factory
		event_target:nanite_factory = { is_ship_size = graygoo_factory }
		NOT = { has_country_flag = gk_told_to_leave }
		event_target:lcluster_factory_system = {
			any_fleet_in_system = {
				has_fleet_flag = nanite_mother_ship
				has_auto_move_target = no
				OR = {
					NOT = { exists = orbit }
					orbit = {
						any_fleet_in_orbit = {
							NOT = { is_same_value = prevprev }
						}
					}
				}
			}
		}
	}
	immediate = {
		event_target:lcluster_factory_system = {
			every_system_planet = {
				limit = {
					OR = {
						is_planet_class = pc_gray_goo
						is_planet_class = pc_gaia
					}
					NOT = {
						any_fleet_in_orbit = {
							exists = owner
							has_fleet_flag = nanite_mother_ship
						}
					}
				}
				prev = {
					every_fleet_in_system = {
						limit = {
							has_fleet_flag = nanite_mother_ship
							has_auto_move_target = no
							OR = {
								NOT = { exists = orbit }
								orbit = {
									any_fleet_in_orbit = {
										NOT = { is_same_value = prevprev }
									}
								}
							}
						}
						queue_actions = {
							wait = {
								duration = 30
								random = 30
							}
						}
						random_list = {
							# 1 = { queue_actions = { move_to = event_target:main_star } }
							1 = {
								queue_actions = { move_to = event_target:lcluster_factory_system }
							}
							1 = {
								queue_actions = { move_to = event_target:nanite_factory }
							}
							5 = {
								solar_system = {
									random_system_planet = {
										limit = {
											OR = {
												is_planet_class = pc_gray_goo
												is_planet_class = pc_gaia
											}
											NOT = {
												any_fleet_in_orbit = {
													exists = owner
													has_fleet_flag = nanite_mother_ship
												}
											}
										}
										prevprev = {
											queue_actions = { orbit_planet = prev }
										}
									}
								}
							}
							3 = {
								auto_move_to_planet = {
									target = prevprev
									clear_auto_move_on_arrival = no
									arrival_effect = shoal_factory_guard_move
								}
							}
							1 = { }
						}
					}
				}
			}
		}
		country_event = { id = a_deadly_tempest.98 days = 30 }
	}
}

# Reorder fleets again
country_event = {
	id = a_deadly_tempest.98
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = event_target:graygoo_country
		exists = event_target:nanite_factory
		event_target:nanite_factory = {
			is_ship_size = graygoo_factory
			is_in_combat = no
		}
		NOT = { has_country_flag = gk_told_to_leave }
	}
	immediate = {
		event_target:CmtGlobalVar = {
			if = {
				limit = { prev = { is_country_type = gate_builders } }
				set_variable = {
					which = CmtVarWhileControlFleet
					value = CmtVarCombatFleetNumber_Dessanu
				}
			}
			else = {
				set_variable = {
					which = CmtVarWhileControlFleet
					value = CmtVarCombatFleetNumber_Graygoo
				}
			}
		}
		# Return to cluster defense
		event_target:lcluster_factory_system = {
			# copy
			set_variable = {
				which = CmtVarCapitalDefenceNumber
				value = PREV
			}
			if = {
				limit = {
					check_variable = {
						which = CmtVarCapitalDefenceNumber
						value < 1
					}
				}
				PREV = { CmtEffectInitFleetUpperLimit = yes }
				set_variable = {
					which = CmtVarCapitalDefenceNumber
					value = PREV
				}
			}
			change_variable = { which = CmtVarCapitalDefenceNumber value = 3 }
			# +3 minimum
			# log = "CmtVarCapitalDefenceNumber [graygoo_country.CmtVarCapitalDefenceNumber] - [lcluster_factory_system.CmtVarCapitalDefenceNumber]."
			if = {
				limit = {
					check_fleet_count_in_system = { "CHECK" = CmtVarCapitalDefenceNumber }
				}
				every_fleet_in_system = {
					limit = {
						has_fleet_flag = nanite_mother_ship
						has_auto_move_target = no
						is_ship_size = graygoo_mothership
					}
					PREV = {
						change_variable = { which = CmtVarCapitalDefenceNumber value = -1 }
					}
				}
			}
			multiply_variable = {
				which = CmtVarCapitalDefenceNumber
				value = -1
			}
			# log = "CmtVarCapitalDefenceNumber [graygoo_country.CmtVarCapitalDefenceNumber] - [lcluster_factory_system.CmtVarCapitalDefenceNumber] while [graygoo_country.fleetCounter]"
			if = {
				limit = {
					check_variable = {
						which = CmtVarCapitalDefenceNumber
						value > 0
					}
				}
				while = {
					count = CmtVarCapitalDefenceNumber
					random_fleet_in_system = {
						limit = {
							has_fleet_flag = nanite_mother_ship
							has_auto_move_target = no
							is_ship_size = graygoo_mothership
						}
						clear_fleet_actions = this
						shoal_cluster_defense = yes
					}
				}
			}
			every_fleet_in_system = {
				limit = {
					has_fleet_flag = nanite_mother_ship
					has_auto_move_target = no
					is_ship_size = graygoo_mothership
					OR = {
						NOT = { exists = orbit }
						# planet = { count_fleet_in_orbit = { count > 1 } }
						orbit = {
							any_fleet_in_orbit = {
								NOT = { is_same_value = prevprev }
							}
						}
					}
					exists = solar_system
					# solar_system = { is_same_value = event_target:lcluster_factory_system }
					# solar_system = { has_star_flag = lcluster }
				}
				# log = "shoal base Guard [This.GetFleetName] returning to [Prev.Planet.GetName]"
				event_target:graygoo_country = {
					change_variable = { which = "fleetCounter" value = 1 }
				}
				shoal_factory_guard_queue = { NUM = "graygoo_country.fleetCounter" }
			}
		}
	}
}

# Failed to leave / Continue patrol (break retreat)
country_event = {
	id = a_deadly_tempest.161
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = { has_country_flag = gk_told_to_leave }
		exists = event_target:lcluster_factory_system
		event_target:lcluster_factory_system = {
			any_fleet_in_system = {
				is_owned_by = root
				is_in_combat = no
				is_ship_size = graygoo_factory
			}
		}
	}
	immediate = {
		every_owned_fleet = {
			limit = {
				has_auto_move_target = yes
				is_ship_size = graygoo_mothership
				exists = solar_system
				solar_system = {
					has_star_flag = lcluster
					NOT = { has_star_flag = graygoo_factory_system }
					# NOT = { is_same_value = event_target:lcluster_factory_system }
				}
			}
			remove_auto_move_target = yes			# works although has_auto_move_target says no!?
			# set_timed_fleet_flag = { flag = guard_returning days = 61 }
		}
		country_event = { id = a_deadly_tempest.97 days = 18 }
	}
}

# Gatebuilders hostility
# From, This = Owner
country_event = {
	id = a_deadly_tempest.162
	hide_window = yes
	is_triggered_only = yes
	# trigger = {
	# 	# always = yes
	# 	OR = {
	# 		exists = event_target:graygoo_country
	# 		exists = event_target:gate_builders
	# 	}
	# }
	immediate = {
		set_country_flag = gate_builder_diplomacy_engaged
		set_country_flag = gate_builders_hostility
		if = {
			limit = { NOT = { exists = event_target:graygoo_country } }
			random_country = {
				limit = { is_country_type = gate_builders }
				save_global_event_target_as = graygoo_country
			}
		}
		# log = "- This [This.GetName] gets hostility to [graygoo_country.GetName]"

		event_target:graygoo_country = {
			if = {
				limit = { NOT = { exists = event_target:gray_species } }
				species = { save_global_event_target_as = gray_species }
			}
			set_faction_hostility = {
				target = prev
				# set_neutral = no
				# set_friendly = no
				set_hostile = yes
			}
			add_resource = {
				minerals = 1000
				energy = 10000
			}
			capital_scope = {
				create_army = {
					name = random
					owner = prev
					species = event_target:gray_species
					type = "nanite_giga_warform"
				}
				while = {
					count = 8
					create_army = {
						name = random
						owner = prev
						species = event_target:gray_species
						type = "robotic_army"
					}
				}
			}
			create_leader = {
				class = general
				species = event_target:gray_species
				name = "bốn"
				immortal = yes
				# event_leader = yes
				gender = indeterminable
				skill = 6
				set_age = 1
				traits = {
					trait = leader_trait_general_gray
					trait = leader_trait_demoralizer
					# trait = leader_trait_general_synthetic
					# trait = leader_trait_general_erudite
				}
				effect = {
					change_leader_portrait = lithnanite
					set_owner = prev
				}
			}
			last_created_army = { assign_leader = last_created_leader }
			# Mothership creates ships
			country_event = { id = a_deadly_tempest.105 days = 1800 }
			# Run Patrol
			country_event = { id = a_deadly_tempest.96 }
			set_country_flag = adtFlagActiveMothershipRebuild
			country_event = {
				id = crisis.2003 # id = fallen_empires_awakening.3
				days = 540
				random = 500
			}
		}
	}
}

# Nanite_dragon_friendship (in fact it is more a scripted effect)
country_event = {
	id = a_deadly_tempest.13006
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		OR = {
			has_global_flag = gray_goo_crisis_set
			has_global_flag = gray_goo_empire_set
		}
		# has_global_flag = dragon_season
	}
	immediate = {
		if = {
			limit = {
				has_global_flag = dragon_season
				NOT = { exists = event_target:spawning_dragons }
			}
			random_country = {
				limit = { is_country_type = ldragon_country }
				save_global_event_target_as = spawning_dragons
			}
		}
		if = {
			limit = {
				has_global_flag = gray_goo_crisis_set
				OR = {
					NOT = { exists = event_target:graygoo_country }
					event_target:graygoo_country = { is_country_type = gate_builders }
				}
			}
			random_country = {
				limit = { is_country_type = gray_goo }
				save_global_event_target_as = graygoo_country
			}
		}
		if = {
			limit = {
				exists = event_target:graygoo_country
				exists = event_target:spawning_dragons
			}
			event_target:graygoo_country = {
				every_owned_fleet = {
					limit = {
						is_disabled = no
						# is_in_combat = yes
						is_ship_class = shipclass_military
						solar_system = {
							NOT = { has_star_flag = lcluster }
						}
					}
					every_owned_ship = { set_disabled = yes }
					# set_aggro_range = 0
					# set_fleet_stance = passive
					# log = "graygoo fleet tmp disabled"
				}
				set_country_flag = first_alien_life
				set_country_flag = has_encountered_other_empire
				establish_communications_no_message = event_target:spawning_dragons
				add_trust = {
					who = event_target:spawning_dragons
					amount = 2000
				}
				set_faction_hostility = {
					set_hostile = no
					# set_neutral = no
					set_friendly = yes
					target = event_target:spawning_dragons
				}
				country_event = { id = a_deadly_tempest.13007 days = 3 }
			}
			event_target:spawning_dragons = {
				set_country_flag = first_alien_life
				set_country_flag = has_encountered_other_empire
				# establish_contact = { who = event_target:graygoo_country location = }
				establish_communications_no_message = event_target:graygoo_country
				add_trust = {
					who = event_target:graygoo_country
					amount = 2000
				}
				set_faction_hostility = {
					set_hostile = no
					# set_neutral = no
					set_friendly = yes
					target = event_target:graygoo_country
				}
				# country_event = { id = a_deadly_tempest.13007 days = 4 }
			}
			# log = "goo_dragon_friendship" # [spawning_dragons.GetName] - [graygoo_country.GetName]
		}
		# else = {
		# 	# log = "goo_dragon_friendship country missing"
		# 	event_target:spawning_dragons = {
		# 		every_owned_ship = {
		# 			limit = { is_disabled = no }
		# 			set_disabled = yes
		# 		}
		# 	}
		# }
		# Gatebuilders
		if = {
			limit = {
				has_global_flag = gray_goo_crisis_set
				has_global_flag = gray_goo_empire_set
				exists = event_target:graygoo_country
			}
			if = {
				limit = { NOT = { exists = event_target:gate_builders } }
				random_country = {
					limit = { is_country_type = gate_builders }
					save_global_event_target_as = gate_builders
				}
			}
			event_target:graygoo_country = {
				set_faction_hostility = {
					set_hostile = no
					#set_neutral = no
					set_friendly = yes
					target = event_target:gate_builders
				}
				event_target:gate_builders = {
					set_faction_hostility = {
						set_hostile = no
						#set_neutral = no
						set_friendly = yes
						target = prev
					}
				}
			}
		}
		if = {
			limit = {
				has_global_flag = a_deadly_tempest_mod_active
				exists = event_target:graygoo_country
			}
			country_event = { id = a_deadly_tempest.13008 days = 7 }
		}
	}
}

country_event = {
	id = a_deadly_tempest.13007
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		# every_owned_fleet = {	limit = { has_fleet_flag = trait_biothrall_tolerance }
		every_owned_ship = {
			limit = { is_disabled = yes }
			set_disabled = no
		}
	}
}
country_event = {
	id = a_deadly_tempest.13008
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		exists = event_target:nanite_factory
		exists = event_target:graygoo_country
	}
	immediate = {
		event_target:graygoo_country = {
			every_owned_fleet = {
				limit = { has_fleet_flag = trait_biothrall_tolerance }
				set_fleet_stance = aggressive
				set_aggro_range = 250
			}
		}
	}
}

### Federation joined event
#This = Federation leader
#From = Joining member
country_event = {
	id = a_deadly_tempest.13079
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		NOT = { has_global_flag = l_cluster_opened }
		federation = {
			any_member = { has_country_flag = encountered_first_lgate }
		}
	}
	immediate = {
		from = { save_event_target_as = fed_joiner }
		every_federation_ally = {
			# federation = { every_member = {
			limit = {
				NOT = { has_country_flag = encountered_first_lgate }
			}
			country_event = { id = a_deadly_tempest.13080 days = 5 }
			# }
		}
	}
}

# TODO NEEDS TO TEST (by FirePrince)
# This = country without l-gate
country_event = {
	id = a_deadly_tempest.13080
	title = "apoc.1.name"
	desc = {
		text = apoc.3.desc
		trigger = {
			NOT = { has_country_flag = encountered_first_gateway }
		}
	}
	desc = {
		text = apoc.3.b.desc
		trigger = { has_country_flag = encountered_first_gateway }
	}
	picture = GFX_evt_drifting_gateway
	show_sound = event_radio_chatter
	is_triggered_only = yes
	trigger = {
		NOR = {
			has_country_flag = encountered_first_lgate
			has_event_chain = l_cluster_chain
		}
		has_federation = yes
		federation = {
			any_member = {
				has_country_flag = encountered_first_lgate
				has_lgate = yes
			}
		}
	}
	immediate = {
		federation = {
			random_member = {
				limit = {
					has_country_flag = encountered_first_lgate
					any_system_within_border = { has_star_flag = lgate }
				}
				random_system_within_border = {
					limit = {
						has_star_flag = lgate
						any_system_megastructure = {
							OR = {
								is_megastructure_type = lgate_base
								is_megastructure_type = lgate_disabled
							}
						}
					}
					save_event_target_as = gateway_system
				}
			}
		}
		set_country_flag = encountered_first_lgate
	}
	location = event_target:gateway_system
	option = {
		name = INTRIGUING
		start_lcluster_chain = yes
	}
}

### Set up Gray Goo
country_event = {
	id = a_deadly_tempest.107
	hide_window = yes
	is_triggered_only = yes
	immediate = {
		give_technology = { tech = tech_space_construction message = no }
		give_technology = { tech = tech_starbase_1 message = no }
		give_technology = { tech = tech_starbase_2 message = no }
		give_technology = { tech = tech_corvettes message = no }
		give_technology = { tech = tech_arc_emitter_2 message = no }
		give_technology = { tech = tech_energy_lance_2 message = no }
		give_technology = { tech = tech_disruptors_3 message = no }
		give_technology = { tech = tech_destroyers message = no }
		give_technology = { tech = tech_cruisers message = no }
		give_technology = { tech = tech_battleships message = no }
		give_technology = { tech = tech_nanite_ships message = no }
		give_technology = { tech = tech_nanite_hull message = no }
		give_technology = { tech = tech_nanite_torpedo message = no }
		give_technology = { tech = tech_adt_energymissiles message = no }
		give_technology = { tech = tech_nanite_strike_craft message = no }
		give_technology = { tech = tech_adt_gg_beam message = no }
		give_technology = { tech = tech_nanocrystals message = no }
		give_technology = { tech = tech_nanite_modular_engineering message = no }
		give_technology = { tech = tech_nanite_living_metal message = no }
		give_technology = { tech = tech_nanite_repair_system message = no }
		give_technology = { tech = tech_nanite_bombardment message = no }
		give_technology = { tech = tech_nanite_mega_construction message = no }
		give_technology = { tech = tech_lgate_construction message = no }
		give_technology = { tech = tech_nanite_guardians message = no }
		give_technology = { tech = tech_nanite_dragon message = no }
		give_technology = { tech = tech_mega_engineering message = no }
		if = {
			limit = { has_federations_dlc = yes }
			give_technology = { tech = tech_mega_shipyard message = no }
		}
		if = {
			limit = { has_utopia = yes }
			give_technology = { tech = tech_ring_world message = no }
			give_technology = { tech = tech_dyson_sphere message = no }
			give_technology = { tech = tech_sentry_array message = no }
			give_technology = { tech = tech_science_nexus message = no }
		}
		if = {
			limit = { has_megacorp = yes }
			give_technology = { tech = tech_strategic_coordination message = no }
			give_technology = { tech = tech_interstellar_assembly message = no }
		}
		# add_global_ship_design = "NAME_Nanite_Mothership"
		# add_global_ship_design = "NAME_Nanite_Interdictor"
		# add_global_ship_design = "NAME_Nanite_Dragon_Young"
		add_global_ship_design = "NAME_Sigma"
		add_global_ship_design = "NAME_Gatebuilder_Starbase"
		# add_global_ship_design = "NAME_Scavenger_Bot"
		# add_global_ship_design = "NAME_Type_69"
		set_country_flag = synthetic_empire
		## Nanite_dragon_friendship
		# country_event = { id = a_deadly_tempest.13006 days = 1 }
		create_ship_design = { design = "NAME_Gatebuilder_Starbase" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Scavenger_Bot" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Nanite_Dragon_Young" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Nanite_Mothership" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Nanite_Warship" }
		add_ship_design = last_created_design
		create_ship_design = { design = "NAME_Nanite_Interdictor" }
		add_ship_design = last_created_design
		# create_ship_design = { design = "NAME_Type_69" }
		# add_ship_design = last_created_design
		# set_policy = {
		# 	policy = artificial_intelligence_policy
		# 	option = ai_full_rights
		# 	cooldown = no
		# }
		# set_policy = {
		# 	policy = orbital_bombardment
		# 	option = orbital_bombardment_indiscriminate
		# 	cooldown = no
		# }
	}
}

## Limit Bulwarks, add restore feature
# on build defense bulwark station
ship_event = {
	id = a_deadly_tempest.221
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		# is_ship_class = shipclass_military_station
		is_ship_size = military_station_nanite_bulwark
		# owner = {
		# 	OR = {
		# 		has_technology = tech_nanite_ships
		# 		is_robot_empire = yes
		# 	}
		# }
	}
	immediate = {
		set_disable_at_health = 0.001
	}
}

# on Bulwark Disabled
# This = Ship
# From = Disabler Ship
ship_event = {
	id = a_deadly_tempest.222
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		# is_ship_class = shipclass_military_station
		is_ship_size = military_station_nanite_bulwark
		is_disabled = yes
		# owner = { is_country_type_with_subjects = yes }
	}

	immediate = {
		if = {
			limit = {
				from.owner = {
					OR = {
						is_robot_empire = yes
						has_technology = tech_nanite_ships
					}
				}
			}
			ship_event = { id = a_deadly_tempest.223 days = 30 }
			set_disable_at_health = 0.001
		} else = {
			set_disable_at_health = -1
			set_disabled = no
		}
	}
}
# restore defense station
ship_event = {
	id = a_deadly_tempest.223
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		is_ship_class = shipclass_military_station
		is_ship_size = military_station_nanite_bulwark
		is_disabled = yes
		# owner = { is_valid_nanite_country = yes }
	}
	immediate = {
		if = {
			limit = {
				owner = {
					OR = {
						is_robot_empire = yes
						has_technology = tech_nanite_ships
					}
				}
			}
			if = {
				limit = { has_hp_percentage >= 0.9 }
				set_disabled = no
			} else = {
				repair_percentage = 0.1
				ship_event = { id = a_deadly_tempest.223 days = 30 }
			}
		} else = {
			set_disable_at_health = -1
			# set_disabled = no
			if = {
				limit = { has_hp_percentage < 0.15 }
				destroy_ship = this
			}
		}
	}
}

# on_starbase_transfer - destroy nanite tech
# THIS = Ship (Starbase)
# FROM = Former Owner (Country)
ship_event = {
	id = a_deadly_tempest.224
	hide_window = yes
	is_triggered_only = yes
	trigger = { exists = starbase }
	immediate = {
		if = {
			limit = {
				OR = {
					NOT = { exists = owner }
					owner = {
						NOR = {
							is_robot_empire = yes
							has_technology = tech_nanite_ships
						}
					}
				}
			}
			starbase = {
				remove_starbase_building = { building = nanite_yards }
				# remove_starbase_module = { module = }
			}
			if = {
				limit = {
					exists = fleet
					fleet = { any_owned_ship = { is_ship_size = military_station_nanite_bulwark } }
				}
				fleet = {
					every_owned_ship = {
						limit = { is_ship_size = military_station_nanite_bulwark }
						set_disable_at_health = -1
						set_disabled = no
						destroy_ship = this
					}
				}
			}
		}
		else_if = {
			limit = {
				exists = fleet
				fleet = { any_owned_ship = { is_ship_size = military_station_nanite_bulwark } }
			}
			fleet = {
				every_owned_ship = {
					limit = { is_ship_size = military_station_nanite_bulwark }
					ship_event = { id = a_deadly_tempest.221 days = 1 }
					ship_event = { id = a_deadly_tempest.222 days = 2 }
				}
			}
		}
	}
}
