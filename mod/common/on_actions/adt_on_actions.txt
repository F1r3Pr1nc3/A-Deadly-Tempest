on_game_start = {
	events = {
		a_deadly_tempest.1
		CrisisManagerMenu.0001		## Calling menu
	}
}
# on_save_game_load = {
on_single_player_save_game_load = {
	events = {
		a_deadly_tempest.2
		CrisisManagerMenu.0002		## Calling menu
	}
}
# No scope, like on_game_start
# on_monthly_pulse = {
# 	events = {
# 		a_deadly_tempest.2
# 	}
# }

# No scope, like on_game_start
# on_yearly_pulse = {
	# events = {
	# }
# }

# No scope, like on_game_start
# on_bi_yearly_pulse = {
# 	events = {
# 	}
# }

# No scope, like on_game_start
# on_five_year_pulse = {
# 	events = {
# 		a_deadly_tempest.3
# 	}
# }

on_mid_game_pulse = {
	events = {
		a_deadly_tempest.3
		# distar.8001 # re-roll, as on_game_start it's not functioning since 3.0
	}
}

on_late_game_pulse = {
	events = {
		a_deadly_tempest.3
	}
}

# No scope, like on_game_start
# on_decade_pulse = {
# 	events = {
# 		a_deadly_tempest.3
# 	}
# }

# Triggers country_event for the attacker upon victory
# (Before controller is switched)
# This = country, leader attacker
# From = country, planet owner
# FromFrom = planet
# IDENTITIES: attacker is the side that "IsHostile" to
# the planet controller; e.g. spawned monster armies
# are attackers, but if they win and the player attempts
# to retake the planet, the player is the attacker
# on_planet_attackers_win = {
# 	events = {
# 	}
# }

# Planet has reached 0 pops from orbital bombardment
# This = Planet
# From = Bombarder
on_planet_zero_pops = {
	events = {
		a_deadly_tempest.81
	}
}

# A country has increased the level of a tech, use last_increased_tech trigger to check tech and level.
# This = Country
# on_tech_increased = {
# 	events = {
# 	}
# }

# A Megastructure has been built
# Root = Country
# From = Megastructure
# FromFrom = System
# FromFromFrom = Fleet
# on_megastructure_built = {
# 	events = {
# 	}
# }

# A Megastructure has begun to be upgraded
# Root = Country
# From = Megastructure
# FromFrom = System
# on_megastructure_upgrade_begin = {
# 	events = {
# 	}
# }

# A Megastructure has been upgraded
# Root = Country
# From = Megastructure
# FromFrom = System
# on_megastructure_upgraded = {
# 	events = {
# 	}
# }

#This = Federation leader
#From = Joining member
on_join_federation = {
	events = {
		a_deadly_tempest.13079
	}
}
on_ship_built = {
	events = {
		a_deadly_tempest.221
	}
}

# This = owner of ship 1 (combatant)
# From = owner of ship 2 (destroyed)
# FromFrom = ship 1
# FromFromFrom = ship 2
on_ship_destroyed_perp = {
	random_events = {
		1 = 0
		2 = a_deadly_tempest.36
	}
}
# This = Ship
# From = Disabler Ship
on_ship_disabled = {
	events = {
		a_deadly_tempest.222
	}
	# random_events = {
	# 	1 = 0
	# 	9 = a_deadly_tempest.222
	# }
}
# Called upon entering FTL (on-action name scripted on the Bypass type)
# THIS = Fleet
# FROM = System jumping to
# FROMFROM = System jumped from
on_entering_lgate = {
	# events = {
	# 	ldragon_country_starts_nanite_ecosystem.1
	# }
}

# A fleet has successfully escaped from combat, executed right before the fleet enters FTL
# This = escaping fleet
# From = system escaped from
# FromFrom = system escaping to
on_emergency_ftl = {
	events = {
		a_deadly_tempest.37
	}
}

# This = owner of fleet 1 (winner)
# From = owner of fleet 2 (loser)
# FromFrom = fleet 1
# FromFromFrom = fleet 2
on_space_battle_won = {
	events = {
		a_deadly_tempest.40
	}
}
# Called when a Starbase changes owner
# THIS = Ship (Starbase)
# FROM = Former Owner (Country)
on_starbase_transfer = {
	events = {
		# action.223
		a_deadly_tempest.224
	}
}

#This = destroyed country
#From = optional, destroyer (country)
on_country_destroyed = {
	events = {
		a_deadly_tempest.2404 # open lcluster
	}
}
