###############################################
###############################################
#####                                     #####
#####     Nanites Goo Special Effects     #####
#####        For A Deadly Tempest         #####
#####       Written by FirePrince         #####
#####                                     #####
###############################################
###############################################

shoal_reinforce = {
	# log = "set fleet size +$AMOUNT$ +$SHIPS$"
	every_owned_fleet = {
		limit = {
			has_auto_move_target = no
			num_ships < $AMOUNT|11$
			is_in_combat = no
			any_ship = {
				is_ship_size = graygoo_mothership
			}
			OR = {
				has_fleet_flag = nanite_mother_ship
				AND = {
					exists = solar_system
					solar_system = {
						has_star_flag = lcluster
						any_system_planet = {
							any_fleet_in_orbit = { exists = owner is_same_value = prevprevprev }
						}
					}
				}
			}
		}
		CmtEffectResetLoop = yes
		while = {
			count = $SHIPS|1$
			CmtEffectProgressLoop4 = yes
			switch = {
				trigger = has_global_flag
				CmtFlagLoopA = {
					CmtEffectCreateShip_GraygooInterdictor = yes
				}
				CmtFlagLoopB = {
					CmtEffectCreateShip_GraygooInterdictor = yes
				}
				CmtFlagLoopC = {
					random_list = {
						1 = {
							CmtEffectCreateShip_GraygooMother = yes
						}
						9 = {
							CmtEffectCreateShip_GraygooInterdictor = yes
						}
					}
				}
			}
		}
	}
}


shoal_factory_guard_move = {
	event_target:lcluster_factory_system = {
		random_system_planet = {
			limit = {
				OR = {
					is_planet_class = pc_gray_goo
					is_planet_class = pc_gaia
				}
				OR = {
					from = { NOT = { exists = orbit } }
					any_fleet_in_orbit = { NOT = { is_same_value = from } }
				}
				NOT = { any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship } }
			}
			from = {
				auto_move_to_planet = {
					target = prev
					clear_auto_move_on_arrival = no
					arrival_effect = shoal_factory_guard_move
				}
			}
		}
	}
}

shoal_factory_guard_queue = {
	queue_actions = {
		wait = {
			duration = 60
			random = 60
		}
		find_closest_planet = {
			trigger = {
				id =  graygoo_guard$NUM$.trigger.1
				OR = {
					is_planet_class = pc_gray_goo
					is_planet_class = pc_gaia
				}
				NAND = {
					prev = { exists = orbit }
					any_fleet_in_orbit = { is_same_value = prevprev }
				}
				NOT = { any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship } }
			}
			found_planet = {
				# orbit_planet = THIS
				effect = {
					id = graygoo_guard$NUM$.effect.2
					if = {
						limit = {
							NOT = { any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship } }
						}
						from = { queue_actions = { orbit_planet = prev } }
					} else = {
						random_list = {
							1 = {
								from = { queue_actions = { orbit_planet = prev } }
							}
							1 = {
								from = { queue_actions = { move_to = event_target:nanite_factory } }
							}
							6 = {
								solar_system = {
									random_system_planet = {
										limit = {
											OR = {
												is_planet_class = pc_gray_goo
												is_planet_class = pc_gaia
											}
											NOT = {
												# is_same_value = prevprevprev
												any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship }
											}
										}
										from = { queue_actions = { orbit_planet = prev } }
									}
								}
							}
						}
					}
				}
			}
			failed = {
				effect = {
					id = graygoo_guard$NUM$.failed
					random_list = {
						1 = {
							modifier = {
								factor = 0
								NOT = { exists = event_target:main_star }
							}
							from = { queue_actions = { move_to = event_target:main_star } }
						}
						2 = {
							modifier = {
								factor = 0
								NOT = { exists = event_target:nanite_factory }
							}
							from = { queue_actions = { move_to = event_target:nanite_factory } }
						}
						3 = {
							solar_system = {
								random_system_planet = {
									limit = {
										OR = {
											is_planet_class = pc_gray_goo
											is_planet_class = pc_gaia
										}
										NOT = {
											any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship }
										}
									}
									from = { queue_actions = { orbit_planet = prev } }
								}
							}
						}
					}
				}
			}
		}
	}
}

# Scope fleet
# TODO Unknown error!?
shoal_continue_guard = {
	queue_actions = {
		wait = {
			duration = 60
			random = 60
		}
		find_random_system = {
			trigger = {
				id = "graygoo_guard$NUM|11$.trigger.1"
				has_star_flag = lcluster
				any_system_planet = {
					OR = {
						is_planet_class = pc_gray_goo
						is_planet_class = pc_gaia
					}
					NOT = { any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship } }
				}
			}
			found_system = {
				move_to = THIS
				find_random_planet = {
					trigger = {
						id = "graygoo_guard$NUM|11$.trigger.3"
						is_star = yes
						exists = starbase
					}
					found_planet = {
						orbit_planet = THIS
						move_to = THIS.starbase
						wait = {
							duration = 60
							random = 30
						}
					}
				}
			}
		}
		find_closest_planet = {
			trigger = {
				id = "graygoo_guard$NUM|11$.trigger.2"
				OR = {
					is_planet_class = pc_gray_goo
					is_planet_class = pc_gaia
				}
				NOT = { any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship } }
			}
			found_planet = {
				orbit_planet = THIS
				wait = {
					duration = 60
					random = 30
				}
			}
			failed = {
				effect = {
					id = "graygoo_guard$NUM|11$.failed"
					# log = "Fail Guard$NUM$ [This.GetFleetName] returning from: [Prev.GetName]"
					shoal_continue_guard = { NUM = @\[$NUM|11$ + 1] }
				}
			}
		}
	}
}

# effect = {remove_auto_move_target = yes	clear_fleet_actions = this}

# Called after planet reset (Scope planet)
generate_new_deposits_and_blockers = {
	clear_deposits = yes

	if = {
		limit = { NOT = { exists = owner } }
		break = yes
	}
	# blockers
	if = {
		limit = {
			owner = {
				has_origin = origin_post_apocalyptic
			}
		}
		add_deposit = d_tomb_world_ruins
		add_deposit = d_tomb_world_wasteland
	}
	else_if = {
		limit = {
			owner = {
				has_civic = civic_machine_terminator
				NOT = { has_origin = origin_machine }
			}
		}

		add_deposit = d_exterminators_ruins
		add_deposit = d_former_battlefield
	}
	else_if = {
		limit = {
			owner = {
				has_civic = civic_machine_servitor
			}
		}

		add_deposit = d_strip_mine
		add_deposit = d_unsupervised_settlement
	}
	else_if = {
		limit = {
			owner = {
				has_civic = civic_machine_assimilator
				NOT = { has_origin = origin_machine }
			}
		}

		add_deposit = d_strip_mine
		add_deposit = d_assimilators_ruins
	}
	else_if = {
		limit = {
			owner = {
				has_authority = auth_machine_intelligence
				NOT = { has_origin = origin_machine }
			}
		}

		add_deposit = d_strip_mine
		add_deposit = d_machine_empire_ruins
	}
	else_if = {
		limit = {
			owner = {
				has_authority = auth_hive_mind
			}
		}

		add_deposit = d_collapsed_burrows
		add_deposit = d_failing_infrastructure
		add_deposit = d_failing_infrastructure
	}
	else_if = {
		limit = {
			owner = {
				NOT = { has_origin = origin_machine }
			}
		}
		add_deposit = d_decrepit_dwellings
		add_deposit = d_failing_infrastructure
		add_deposit = d_failing_infrastructure
	}

	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				NOR = {
					has_valid_civic = civic_hive_devouring_swarm
					has_origin = origin_lithoid
				}
			}
		}
		while = {
			count = 4
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				has_valid_civic = civic_hive_devouring_swarm
			}
		}
		while = {
			count = 2
			add_deposit = d_hibernating_lithoids
		}
	}
}

# Scope country
give_tech_option = {
	if = {
		limit = {
			NOR = {
				has_technology = $TECH$
				has_tech_option = $TECH$
				is_researching_technology = $TECH$
			}
		}
		tooltip = {
			add_research_option = $TECH$
		}
		add_tech_progress = {
			tech = $TECH$
			progress = 0.25
		}
	# give_technology = { tech = $TECH$ message = no }
	}
}
