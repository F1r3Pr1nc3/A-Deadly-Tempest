###############################################
###############################################
#####                                     #####
#####     Nanites Goo Special Effects     #####
#####        For A Deadly Tempest         #####
#####       Written by FirePrince         #####
#####                                     #####
###############################################
###############################################

shoal_guard_reinforce = {
	# log = "set fleet size +$AMOUNT$ +$SHIPS$"
	# every_owned_fleet = {
	random_owned_fleet = {
		limit = {
			has_auto_move_target = no
			is_in_combat = no
			OR = {
				has_fleet_flag = nanite_mother_ship
				AND = {
					exists = solar_system
					solar_system = {
						has_star_flag = lcluster
						any_system_planet = {
							any_fleet_in_orbit = { exists = owner is_same_value = prevprevprev }
						}
					}
				}
			}
			is_ship_size = graygoo_mothership # implicit any_owned_ship
			num_ships < $AMOUNT|11$
		}
		CmtEffectResetLoop = yes
		while = {
			count = $SHIPS|1$
			CmtEffectProgressLoop4 = yes
			switch = {
				trigger = has_global_flag
				CmtFlagLoopA = {
					CmtEffectCreateShip_GraygooInterdictor = yes
				}
				CmtFlagLoopB = {
					CmtEffectCreateShip_GraygooInterdictor = yes
				}
				CmtFlagLoopC = {
					random_list = {
						1 = {
							CmtEffectCreateShip_GraygooMother = yes
						}
						9 = {
							CmtEffectCreateShip_GraygooInterdictor = yes
						}
					}
				}
			}
		}
	}
}

shoal_global_reinforce = {
	log = "shoal_global_reinforce [AMOUNT] - [SHIPS]"
	every_owned_fleet = {
		limit = {
			is_in_combat = no
			is_ship_size = graygoo_mothership # implicit any_owned_ship
			# OR = {
			# 	has_fleet_flag = nanite_mother_ship
			# 	has_fleet_flag = trait_biothrall_tolerance
			# }
			num_ships < $AMOUNT|11$
		}
		CmtEffectResetLoop = yes
		while = {
			count = $SHIPS|1$
			CmtEffectProgressLoop4 = yes
			switch = {
				trigger = has_global_flag
				CmtFlagLoopA = {
					CmtEffectCreateShip_GraygooInterdictor = yes
				}
				CmtFlagLoopB = {
					CmtEffectCreateShip_GraygooInterdictor = yes
				}
				CmtFlagLoopC = {
					random_list = {
						1 = {
							CmtEffectCreateShip_GraygooMother = yes
						}
						9 = {
							CmtEffectCreateShip_GraygooInterdictor = yes
						}
					}
				}
			}
		}
	}
}

## make dynamic with Crisis Manager
shoal_guard_dynamic_reinforce = {
	# make dynamic with Crisis Manager
	#event_target:CmtGlobalVar = { set_variable = { which = CmtVarWhileControlShip value = CmtVarFleetPower_Graygoo } }
	# CmtVarCapitalDefenceNumber 1-8 vanilla = 4
	set_variable = { which = CapitalDefence_tmp value = CmtVarCapitalDefenceNumber }
	# log = "guard_dynamic [$STRENGTH$] - [CmtVarCapitalDefenceNumber]"
	if = { limit = { end_game_years_passed > 35 }
		multiply_variable = { which = CapitalDefence_tmp value = 10 }
		change_variable = { which = CapitalDefence_tmp value = 1 }
		$KIND$ = {
			# "AMOUNT" = @\[ $STRENGTH|4$ * 10 + 1 ] # 41
			"AMOUNT" = CapitalDefence_tmp
			"SHIPS" = 3
		}
	} else_if = { limit = { mid_game_years_passed > 50 } # todo $MidYear|
		multiply_variable = { which = CapitalDefence_tmp value = 5 }
		change_variable = { which = CapitalDefence_tmp value = 1 }
		$KIND$ = {
			# "AMOUNT" = @\[ $STRENGTH|4$ * 5 + 1 ] # 21
			"AMOUNT" = CapitalDefence_tmp
			"SHIPS" = 2
		}
	} else_if = { limit = { mid_game_years_passed > 5 }
		multiply_variable = { which = CapitalDefence_tmp value = 2.5 }
		change_variable = { which = CapitalDefence_tmp value = 1 }
		$KIND$ = {
			# "AMOUNT" = @\[ $STRENGTH|4$ * 2.5 + 1 ] # 11
			"AMOUNT" = CapitalDefence_tmp
			"SHIPS" = 1
		}
	} else = {
		multiply_variable = { which = CapitalDefence_tmp value = 1.5 }
		$KIND$ = {
			# "AMOUNT" = @\[ $STRENGTH|4$ * 1.5 ] # 6
			"AMOUNT" = CapitalDefence_tmp
			"SHIPS" = 1
		}
	}
}

# fleet
shoal_factory_guard_move = {
	event_target:lcluster_factory_system = {
		random_system_planet = {
			limit = {
				OR = {
					is_planet_class = pc_gray_goo
					is_planet_class = pc_gaia
				}
				OR = {
					from = { NOT = { exists = orbit } }
					any_fleet_in_orbit = { NOT = { is_same_value = from } }
				}
				NOT = { any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship } }
			}
			from = {
				auto_move_to_planet = {
					target = prev
					clear_auto_move_on_arrival = no
					# arrival_effect = shoal_factory_guard_move ?
				}
			}
		}
	}
}

shoal_factory_guard_queue = {
	queue_actions = {
		wait = {
			duration = 60
			random = 60
		}
		find_closest_planet = {
			trigger = {
				id =  graygoo_guard$NUM$.trigger.1
				OR = {
					is_planet_class = pc_gray_goo
					is_planet_class = pc_gaia
				}
				NAND = {
					prev = { exists = orbit }
					any_fleet_in_orbit = { is_same_value = prevprev }
				}
				NOT = { any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship } }
			}
			found_planet = {
				# orbit_planet = THIS
				effect = {
					id = graygoo_guard$NUM$.effect.2
					if = {
						limit = {
							NOT = { any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship } }
						}
						from = { queue_actions = { orbit_planet = prev } }
					} else = {
						random_list = {
							1 = {
								from = { queue_actions = { orbit_planet = prev } }
							}
							1 = {
								from = { queue_actions = { move_to = event_target:nanite_factory } }
							}
							6 = {
								solar_system = {
									random_system_planet = {
										limit = {
											OR = {
												is_planet_class = pc_gray_goo
												is_planet_class = pc_gaia
											}
											NOT = {
												# is_same_value = prevprevprev
												any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship }
											}
										}
										from = { queue_actions = { orbit_planet = prev } }
									}
								}
							}
						}
					}
				}
			}
			failed = {
				effect = {
					id = graygoo_guard$NUM$.failed
					random_list = {
						1 = {
							modifier = {
								factor = 0
								NOT = { exists = event_target:main_star }
							}
							from = { queue_actions = { move_to = event_target:main_star } }
						}
						2 = {
							modifier = {
								factor = 0
								NOT = { exists = event_target:nanite_factory }
							}
							from = { queue_actions = { move_to = event_target:nanite_factory } }
						}
						3 = {
							solar_system = {
								random_system_planet = {
									limit = {
										OR = {
											is_planet_class = pc_gray_goo
											is_planet_class = pc_gaia
										}
										NOT = {
											any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship }
										}
									}
									from = { queue_actions = { orbit_planet = prev } }
								}
							}
						}
					}
				}
			}
		}
	}
}

# Scope fleet
shoal_cluster_defense = {
	closest_system = {
		limit = {
			has_star_flag = lcluster
			NOT = { has_star_flag = graygoo_factory_system }
			any_system_planet = {
				OR = {
					is_planet_class = pc_gray_goo
					is_planet_class = pc_gaia
				}
				NOT = { any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship } }
			}
		}
		max_steps = 4
		random_system_planet = {
			limit = {
				OR = {
					is_planet_class = pc_gray_goo
					is_planet_class = pc_gaia
				}
				NOT = { any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship } }
			}
			FROM = {
				auto_move_to_planet = {
					target = PREV
					clear_auto_move_on_arrival = yes
				}
			}
			# break = yes
		}
	}
	# TODO Unknown error!?
	# event_target:graygoo_country = { change_variable = { which = fleetCounter value = 1 } }
	# shoal_continue_cluster_defense = { NUM = "graygoo_country.fleetCounter" }
}

# Scope fleet
# TODO Unknown error!?
shoal_continue_cluster_defense = {
	queue_actions = {
		# wait = {
		# 	duration = 60
		# 	random = 60
		# }
		# find_random_system = {
		find_closest_system = {
			trigger = {
				id = "graygoo_def_$NUM|11$.trigger.1"
				has_star_flag = lcluster
				NOT = { has_star_flag = graygoo_factory_system }
				any_system_planet = {
					OR = {
						is_planet_class = pc_gray_goo
						is_planet_class = pc_gaia
					}
					NOT = { any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship } }
				}
			}
			found_system = {
				move_to = THIS
				find_random_planet = {
					trigger = {
						id = "graygoo_def_$NUM|11$.trigger.3"
						# is_star = yes
						# exists = starbase
						OR = {
							is_planet_class = pc_gray_goo
							is_planet_class = pc_gaia
						}
						NOT = { any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship } }
					}
					found_planet = {
						move_to = THIS
						orbit_planet = THIS
						# move_to = THIS.starbase
						# wait = {
						# 	duration = 60
						# 	random = 30
						# }
					}
					failed = {
						effect = {
							id = "graygoo_def_$NUM|11$.failed"
							# log = "Fail graygoo_def [This.GetFleetName] returning from [Prev.GetName] - [From.GetFleetName]"
							# shoal_continue_cluster_defense = { NUM = @\[$NUM|11$ + 1] }
							event_target:graygoo_country = { change_variable = { which = "fleetCounter" value = 1 } }
							FROM = { shoal_continue_cluster_defense = { NUM = "graygoo_country.fleetCounter" } }
						}
					}
				}
			}
		}
		# wait = {
		# 	duration = 60
		# 	random = 30
		# }
		# find_closest_planet = {
		# 	trigger = {
		# 		id = "graygoo_guard$NUM|11$.trigger.2"
		# 		OR = {
		# 			is_planet_class = pc_gray_goo
		# 			is_planet_class = pc_gaia
		# 		}
		# 		NOT = { any_fleet_in_orbit = { exists = owner has_fleet_flag = nanite_mother_ship } }
		# 	}
		# 	found_planet = {
		# 		orbit_planet = THIS
		# 		wait = {
		# 			duration = 60
		# 			random = 30
		# 		}
		# 	}
		# 	failed = {
		# 		effect = {
		# 			id = "graygoo_guard$NUM|11$.failed"
		# 			# log = "Fail Guard$NUM$ [This.GetFleetName] returning from: [Prev.GetName]"
		# 			# shoal_continue_cluster_defense = { NUM = @\[$NUM|11$ + 1] }
		# 			event_target:graygoo_country = { change_variable = { which = fleetCounter value = 1 } }
		# 			shoal_continue_cluster_defense = { NUM = "graygoo_country.fleetCounter" }
		# 		}
		# 	}
		# }
	}
}

# effect = {remove_auto_move_target = yes	clear_fleet_actions = this}

# Called after planet reset (Scope planet, ROOT country)
generate_new_deposits_and_blockers = {
	clear_deposits = yes

	if = {
		limit = { exists = owner }
		# blockers
		if = {
			limit = {
				owner = {
					has_origin = origin_post_apocalyptic
				}
			}
			add_deposit = d_tomb_world_ruins
			add_deposit = d_tomb_world_wasteland
		}
		else_if = {
			limit = {
				owner = {
					has_civic = civic_machine_terminator
					NOT = { has_origin = origin_machine }
				}
			}
			add_deposit = d_exterminators_ruins
			add_deposit = d_former_battlefield
		}
		else_if = {
			limit = {
				owner = {
					has_civic = civic_machine_servitor
				}
			}
			add_deposit = d_strip_mine
			add_deposit = d_unsupervised_settlement
		}
		else_if = {
			limit = {
				owner = {
					has_civic = civic_machine_assimilator
					NOT = { has_origin = origin_machine }
				}
			}
			add_deposit = d_strip_mine
			add_deposit = d_assimilators_ruins
		}
		else_if = {
			limit = {
				owner = {
					has_authority = auth_machine_intelligence
					NOT = { has_origin = origin_machine }
				}
			}
			add_deposit = d_strip_mine
			add_deposit = d_machine_empire_ruins
		}
		else_if = {
			limit = {
				owner = {
					has_authority = auth_hive_mind
				}
			}
			add_deposit = d_collapsed_burrows
			add_deposit = d_failing_infrastructure
			add_deposit = d_failing_infrastructure
		}
		else_if = {
			limit = {
				owner = {
					NOT = { has_origin = origin_machine }
				}
			}
			add_deposit = d_decrepit_dwellings
			add_deposit = d_failing_infrastructure
			add_deposit = d_failing_infrastructure
		}

		if = {
			limit = {
				owner = {
					is_lithoid_empire = yes
					NOR = {
						has_valid_civic = civic_hive_devouring_swarm
						has_origin = origin_lithoid
					}
				}
			}
			while = {
				count = 4
				add_deposit = d_hibernating_lithoids
			}
		}

		if = {
			limit = {
				owner = {
					is_lithoid_empire = yes
					has_valid_civic = civic_hive_devouring_swarm
				}
			}
			while = {
				count = 2
				add_deposit = d_hibernating_lithoids
			}
		}
	}
}

# Scope country
give_tech_option = {
	if = {
		limit = {
			NOR = {
				has_technology = $TECH$
				has_tech_option = $TECH$
				is_researching_technology = $TECH$
			}
		}
		# hidden_trigger = {
		# 	always = $INFO|yes$
		# 	tooltip = { add_research_option = $TECH$ }

		# }
		# add_tech_progress = {
		# 	tech = $TECH$
		# 	progress = 0.25
		# }
		if = {
			limit = { always = $INFO|yes$ }
			tooltip = { add_research_option = $TECH$ }
			add_tech_progress = {
				tech = $TECH$
				progress = 0.25
			}
		} else = {
			add_tech_progress = {
				tech = $TECH$
				progress = 0.1
			}
		}
		# give_technology = { tech = $TECH$ message = no }
	}
}
