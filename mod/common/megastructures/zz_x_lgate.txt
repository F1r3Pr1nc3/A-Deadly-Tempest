# See README.txt for example
# Active L-Gate
lgate_base = {
	entity = "gatebuilder_01_gateway_entity"
	construction_entity = "gateway_portal_entity"
	portrait = "GFX_megastructure_construction_background"
	place_entity_on_planet_plane = no
	# build_outside_gravity_well = yes
	show_galactic_map_icon = no
	show_in_outliner = no
	bypass_type = lgate
	build_time = 500
	resources = {
		category = megastructures_gateways
		cost = { nanites = 100 }
		upkeep = { }
		produces = { }
	}
	entity_offset = { x = 8 y = 8 }
	construction_blocks_and_blocked_by = none
	upgrade_from = { lgate_disabled }
	prerequisites = { "tech_lgate_construction" }
	potential = {
		always = no
		# has_civic = civic_machine_nanites
		# has_technology = tech_lgate_construction
		# has_technology = tech_gateway_activation
	}
	possible = {
		custom_tooltip = {
			fail_text = "requires_tech_lgate_construction"
			from = { has_technology = tech_lgate_construction }
		}
		custom_tooltip = { fail_text = "requires_inside_border" is_inside_border = from }
	}
	placement_rules = {
		# Those would be ignored since the gateway is being "free-placed" between the inner and outer radius of the system
	}
}

# Disabled L-Gate
lgate_disabled = {
	entity = "deactivated_gatebuilder_gateway_entity"
	construction_entity = "gateway_portal_entity"
	portrait = "GFX_megastructure_construction_background"
	place_entity_on_planet_plane = no
	build_outside_gravity_well = yes
	show_galactic_map_icon = no
	show_in_outliner = no
	bypass_type = lgate
	build_time = 720 # 1500
	resources = {
		category = megastructures_gateways
		cost = {
			nanites = 1000
			energy = 1000
			alloys = 1000
			influence = 80
		}
		upkeep = { }
		produces = { }
	}
	entity_offset = { x = 8 y = 8 }
	construction_blocks_and_blocked_by = self_type
	upgrade_from = { nanite_gateway } # REMOVEME in v3.14
	prerequisites = { "tech_lgate_construction" }
	potential = {
		OR = {
			has_global_flag = l_cluster_opened
			# has_ascension_perk = ap_emergency_calculation
			has_event_chain = l_cluster_chain
		}
		has_technology = tech_lgate_construction
	}
	# trigger, scope: galactic object, from: country
	possible = {
		exists = starbase
		custom_tooltip = { fail_text = "requires_inside_border" is_inside_border = from }
		custom_tooltip = {
			fail_text = "requires_surveyed_system"
			count_system_planet = { limit = { is_surveyed = { who = prev.from status = no } } count = 0 }
		}
		# custom_tooltip = { fail_text = "requires_black_hole"
		custom_tooltip = { fail_text = "ap_emergency_calculation_req_5"
			OR = { is_star_class = sc_black_hole is_star_class = sc_neutron_star is_star_class = sc_pulsar }
		}
		custom_tooltip = {
			fail_text = "requires_no_existing_gateway"
			NOR = { has_star_flag = lgate has_megastructure = lgate_disabled has_megastructure = lgate_base }
		}
		custom_tooltip = {
			fail_text = "not_in_lcluster"
			NOT = { has_star_flag = lcluster }
		}
		custom_tooltip = {
			fail_text = "requires_tech_lgate_construction"
			from = { has_technology = tech_lgate_construction }
		}
		custom_tooltip = { fail_text = "requires_no_binary_trinary" is_binary_star = no is_trinary_star = no }
	}
	# root = system
	# from = country
	placement_rules = {
		planet_possible = {
			custom_tooltip = { fail_text = "must_build_around_star" is_star = yes }
			custom_tooltip = { fail_text = "requires_no_anomaly" has_anomaly = no }
		}
	}
	# root = system
	# from = country
	ai_weight = {
		factor = 2
		modifier = { factor = 0
			OR = {
				starbase = { NOT = { has_starbase_size >= starbase_starport } }
				any_neighbor_system = { has_star_flag = lgate }
			}
		}
		modifier = { factor = 0.1 starbase = { NOT = { has_starbase_size >= starbase_starfortress } } }
		modifier = { factor = 0.1 any_neighbor_system = { exists = owner owner = { NOT = { is_same_empire = from } } } }
		modifier = { factor = 3 is_star_class = sc_black_hole }
		# modifier = {
		# 	factor = 0.2
		# 	from = {
		# 		has_monthly_income = { resource = nanites value <= 0 }
		# 		NOT = { has_civic = civic_harvester_nanites }
		# 	}
		# }
	}
	on_build_start = { }
	on_build_cancel = { }
	# effects, scope: galactic object, from: country, fromfrom: megastructure instance
	on_build_complete = {
		# Works, but let's open the gate over the time event?
		if = {
			limit = { exists = owner }
			fromfrom = { CmtEffectOpenLgate = yes }
		}
		set_star_flag = lgate
		# Notify
		from = {
			if = {
				limit = { has_ascension_perk = ap_emergency_calculation }
				country_event = { id = UniqueAscensionPerksEvents.8054 }
			}
			else = {
				# _if = {
				# limit = {
				# 	has_global_flag = l_cluster_opened
				# 	OR = {
				# 		has_ascension_perk = ap_nano_to_nanite						# UAP
				# 		has_technology = tech_nanite_gate
				# 		has_technology = tech_lgate_construction					# ADT
				# 	}
				# 	NOT = { has_ascension_perk = ap_emergency_calculation }
				# }
				country_event = { id = UniqueAscensionPerksEvents.8003 }
			}
		}
	}
}
